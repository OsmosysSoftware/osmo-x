{
	"info": {
		"_postman_id": "8254490e-876a-4634-b836-3a35201489e4",
		"name": "OsmoX",
		"description": "OsmoX API helps creating new notifications, fetching existing notifications as well as perform authorization related tasks.",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "20654268"
	},
	"item": [
		{
			"name": "SMTP Notifications",
			"item": [
				{
					"name": "Send SMTP Notification - Success",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response is valid JSON\", function () {",
									"    pm.response.to.be.json;",
									"});",
									"pm.test(\"Response has valid 'status' and 'data' properties\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property(\"status\", \"success\");",
									"    pm.expect(jsonData).to.have.property(\"data\").to.be.an(\"object\");",
									"});",
									"pm.test(\"Response contains a valid 'notification' object\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.data).to.have.property(\"notification\").to.be.an(\"object\");",
									"});",
									"pm.test(\"Response 'channelType' is 1\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.data.notification).to.have.property(\"channelType\", 1);",
									"});",
									"pm.test(\"Response 'deliveryStatus' is 1\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.data.notification).to.have.property(\"deliveryStatus\", 1);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"uuid": "e8772941-f8c1-473a-b5d4-f79b3acbf5da"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{apikey}}",
								"uuid": "c8e15ea5-91ee-4881-8bfc-ba3701124266"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    // Assuming providerId 1 also has channelType 1\n    \"providerId\": 1,\n    \"data\": {\n        \"from\": \"jacuzisplot@gmail.com\",\n        \"to\": \"vikas.k@osmosys.co\",\n        \"subject\": \"Test subject\",\n        \"text\": \"This is a test notification\",\n        \"html\": \"<b>This is a test notification</b>\"\n    }\n}"
						},
						"url": {
							"raw": "localhost:3000/notifications",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"notifications"
							]
						},
						"description": "Allows successfully creating new notification for the SMTP channel type."
					},
					"response": []
				},
				{
					"name": "Send SMTP Notification - Mismatch in ChannelType",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response is valid JSON\", function () {",
									"    pm.response.to.be.json;",
									"});",
									"pm.test(\"Response has valid 'status' and 'data' properties\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property(\"status\", \"success\");",
									"    pm.expect(jsonData).to.have.property(\"data\").to.be.an(\"object\");",
									"});",
									"pm.test(\"Response contains a valid 'notification' object\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.data).to.have.property(\"notification\").to.be.an(\"object\");",
									"});",
									"pm.test(\"Response 'channelType' is 1\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.data.notification).to.have.property(\"channelType\", 1);",
									"});",
									"pm.test(\"Response 'deliveryStatus' is 1\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.data.notification).to.have.property(\"deliveryStatus\", 1);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"uuid": "6855b47e-eb14-4949-a990-8b3325152e24"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{apikey}}",
								"uuid": "e516fa15-9a57-413e-b4bd-68787d3f0251"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    // Assuming providerId 6 does not have channelType 1\n    \"providerId\": 6,\n    \"data\": {\n        \"from\": \"jacuzisplot@gmail.com\",\n        \"to\": \"vikas.k@osmosys.co\",\n        \"subject\": \"Test subject\",\n        \"text\": \"This is a test notification\",\n        \"html\": \"<b>This is a test notification</b>\"\n    }\n}"
						},
						"url": {
							"raw": "localhost:3000/notifications",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"notifications"
							]
						},
						"description": "Allows successfully creating new notification for the SMTP channel type."
					},
					"response": []
				},
				{
					"name": "Send SMTP Notification - Missing To Field",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response is valid JSON\", function () {",
									"    pm.response.to.be.json;",
									"});",
									"pm.test(\"Response for Invalid Data (Missing 'to' Value)\", function () {",
									"    pm.expect(pm.response.code).to.equal(400);",
									"    pm.expect(pm.response.json().status).to.equal(\"fail\");",
									"    pm.expect(pm.response.json().data[0]).to.equal(\"to should not be empty\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"uuid": "c546c968-5a3e-4a43-882e-26b7191caf77"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{apikey}}",
								"uuid": "84fcaae1-2ba2-43ca-a306-a7bee4237a3a"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"providerId\": 1,\n    \"data\": {\n        \"from\": \"vikaskyatannawar@gmail.com\",\n        \"subject\": \"Test subject\",\n        \"text\": \"This is a test notification\",\n        \"html\": \"<b>This is a test notification</b>\"\n    }\n}"
						},
						"url": {
							"raw": "localhost:3000/notifications",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"notifications"
							]
						},
						"description": "Allows representing failure in creating new notification for the SMTP channel type when missing the `to` field."
					},
					"response": []
				},
				{
					"name": "Send SMTP Notification - Invalid API Key",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response is valid JSON\", function () {",
									"    pm.response.to.be.json;",
									"});",
									"pm.test(\"Failed request with invalid API key\", function () {",
									"    pm.expect(pm.response.code).to.equal(401);",
									"    pm.expect(pm.response.json().status).to.equal(\"fail\");",
									"    pm.expect(pm.response.json().data).to.equal(\"Invalid API key\");",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"uuid": "401d6ec2-8de4-47d7-98fa-251ec2fca2af"
							},
							{
								"key": "Authorization",
								"value": "bad-api-key",
								"uuid": "7cda822d-57ef-4d47-9c3f-54f74d044438"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"providerId\": 1,\n    \"data\": {\n        \"from\": \"vikaskyatannawar@gmail.com\",\n        \"to\": \"vikas.k@osmosys.co\",\n        \"subject\": \"Test subject\",\n        \"text\": \"This is a test notification\",\n        \"html\": \"<b>This is a test notification</b>\"\n    }\n}"
						},
						"url": {
							"raw": "localhost:3000/notifications",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"notifications"
							]
						},
						"description": "Allows representing failure in creating new notification for the SMTP channel type when passing invalid API key."
					},
					"response": []
				}
			],
			"description": "Collection of requests pertaining to creating notifications for the SMTP channel type."
		},
		{
			"name": "Mailgun Notifications",
			"item": [
				{
					"name": "Send Mailgun Notification - Success",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response is valid JSON\", function () {",
									"    pm.response.to.be.json;",
									"});",
									"pm.test(\"Response has valid 'status' and 'data' properties\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property(\"status\", \"success\");",
									"    pm.expect(jsonData).to.have.property(\"data\").to.be.an(\"object\");",
									"});",
									"pm.test(\"Response contains a valid 'notification' object\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.data).to.have.property(\"notification\").to.be.an(\"object\");",
									"});",
									"pm.test(\"Response 'channelType' is 2\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.data.notification).to.have.property(\"channelType\", 2);",
									"});",
									"pm.test(\"Response 'deliveryStatus' is 1\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.data.notification).to.have.property(\"deliveryStatus\", 1);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"uuid": "54f71f70-9751-40b5-a41f-d6e122abb06c"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{apikey}}",
								"uuid": "eb433e5f-745e-47ed-9cc6-67e979b8fa01"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    // Assuming providerId 2 also has channelType 2\n    \"providerId\": 2,\n    \"data\": {\n        \"from\": \"vikaskyatannawar@gmail.com\",\n        \"to\": \"vikas.k@osmosys.co\",\n        \"subject\": \"Test subject\",\n        \"text\": \"This is a test notification\",\n        \"html\": \"<b>This is a test notification</b>\"\n    }\n}"
						},
						"url": {
							"raw": "localhost:3000/notifications",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"notifications"
							]
						},
						"description": "Allows successfully creating new notification for the Mailgun channel type."
					},
					"response": []
				},
				{
					"name": "Send Mailgun Notification - Mismatch in ChannelType",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response is valid JSON\", function () {",
									"    pm.response.to.be.json;",
									"});",
									"pm.test(\"Response has valid 'status' and 'data' properties\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property(\"status\", \"success\");",
									"    pm.expect(jsonData).to.have.property(\"data\").to.be.an(\"object\");",
									"});",
									"pm.test(\"Response contains a valid 'notification' object\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.data).to.have.property(\"notification\").to.be.an(\"object\");",
									"});",
									"pm.test(\"Response 'channelType' is 2\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.data.notification).to.have.property(\"channelType\", 2);",
									"});",
									"pm.test(\"Response 'deliveryStatus' is 1\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.data.notification).to.have.property(\"deliveryStatus\", 1);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"uuid": "5ab98a32-4d77-4447-b546-cca57f46bf73"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{apikey}}",
								"uuid": "bda3ccc1-a787-49dc-b210-a230e6400730"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    // Assuming providerId 6 does not have channelType 2\n    \"providerId\": 6,\n    \"data\": {\n        \"from\": \"vikaskyatannawar@gmail.com\",\n        \"to\": \"vikas.k@osmosys.co\",\n        \"subject\": \"Test subject\",\n        \"text\": \"This is a test notification\",\n        \"html\": \"<b>This is a test notification</b>\"\n    }\n}"
						},
						"url": {
							"raw": "localhost:3000/notifications",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"notifications"
							]
						},
						"description": "Allows successfully creating new notification for the Mailgun channel type."
					},
					"response": []
				},
				{
					"name": "Send Mailgun Notification - Missing To Field",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response is valid JSON\", function () {",
									"    pm.response.to.be.json;",
									"});",
									"pm.test(\"Response for Invalid Data (Missing 'to' Value)\", function () {",
									"    pm.expect(pm.response.code).to.equal(400);",
									"    pm.expect(pm.response.json().status).to.equal(\"fail\");",
									"    pm.expect(pm.response.json().data[0]).to.equal(\"to should not be empty\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"uuid": "79836819-b4be-4c40-ba5d-ead587518ad0"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{apikey}}",
								"uuid": "4589d0a4-9e94-4526-b6e9-fc81c15067f6"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"providerId\": 2,\n    \"data\": {\n        \"from\": \"vikaskyatannawar@gmail.com\",\n        \"subject\": \"Test subject\",\n        \"text\": \"This is a test notification\",\n        \"html\": \"<b>This is a test notification</b>\"\n    }\n}"
						},
						"url": {
							"raw": "localhost:3000/notifications",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"notifications"
							]
						},
						"description": "Allows representing failure in creating new notification for the Mailgun channel type when missing the `to` field."
					},
					"response": []
				},
				{
					"name": "Send Mailgun Notification - Invalid API Key",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response is valid JSON\", function () {",
									"    pm.response.to.be.json;",
									"});",
									"pm.test(\"Failed request with invalid API key\", function () {",
									"    pm.expect(pm.response.code).to.equal(401);",
									"    pm.expect(pm.response.json().status).to.equal(\"fail\");",
									"    pm.expect(pm.response.json().data).to.equal(\"Invalid API key\");",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"uuid": "7c01d4f7-ba43-4952-86c6-ba89ab4def9d"
							},
							{
								"key": "Authorization",
								"value": "bad-api-key",
								"uuid": "8622b75e-bfa1-48d7-a9e2-246df61efd51"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"providerId\": 2,\n    \"data\": {\n        \"from\": \"vikaskyatannawar@gmail.com\",\n        \"to\": \"vikas.k@osmosys.co\",\n        \"subject\": \"Test subject\",\n        \"text\": \"This is a test notification\",\n        \"html\": \"<b>This is a test notification</b>\"\n    }\n}"
						},
						"url": {
							"raw": "localhost:3000/notifications",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"notifications"
							]
						},
						"description": "Allows representing failure in creating new notification for the Mailgun channel type when passing invalid API key."
					},
					"response": []
				}
			],
			"description": "Collection of requests pertaining to creating notifications for the Mailgun channel type."
		},
		{
			"name": "360Dialog WhatsApp Notifications",
			"item": [
				{
					"name": "Send 360Dialog WhatsApp Notification - Success",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response is valid JSON\", function () {",
									"    pm.response.to.be.json;",
									"});",
									"pm.test(\"Response has valid 'status' and 'data' properties\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property(\"status\", \"success\");",
									"    pm.expect(jsonData).to.have.property(\"data\").to.be.an(\"object\");",
									"});",
									"pm.test(\"Response contains a valid 'notification' object\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.data).to.have.property(\"notification\").to.be.an(\"object\");",
									"});",
									"pm.test(\"Response 'channelType' is 3\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.data.notification).to.have.property(\"channelType\", 3);",
									"});",
									"pm.test(\"Response 'deliveryStatus' is 1\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.data.notification).to.have.property(\"deliveryStatus\", 1);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"uuid": "3b19dbc2-e355-417e-a56b-5a320af38aa7"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{apikey}}",
								"uuid": "e6bd47fd-4992-4a75-8e23-453ca046c413"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    // Assuming providerId 3 also has channelType 3\n    \"providerId\": 3,\n    \"data\": {\n        \"to\": \"919004812051\",\n        \"type\": \"template\",\n        \"template\": {\n            \"namespace\": \"d8bcb6bd_2ab2_439c_9d9e_947501266c77\",\n            \"name\": \"ir_incident_resolution\",\n            \"language\": {\n                \"policy\": \"deterministic\",\n                \"code\": \"en\"\n            },\n            \"components\": [\n                {\n                    \"type\": \"body\",\n                    \"parameters\": [\n                        {\n                            \"type\": \"text\",\n                            \"text\": \"Bishal Biswas\"\n                        },\n                        {\n                            \"type\": \"text\",\n                            \"text\": \"WNK227\"\n                        },\n                        {\n                            \"type\": \"text\",\n                            \"text\": \"Massive Earthquake\"\n                        },\n                        {\n                            \"type\": \"text\",\n                            \"text\": \"Power Grid\"\n                        },\n                        {\n                            \"type\": \"text\",\n                            \"text\": \"Bishal Mondal\"\n                        },\n                        {\n                            \"type\": \"text\",\n                            \"text\": \"Vikas\"\n                        },\n                        {\n                            \"type\": \"text\",\n                            \"text\": \"Open\"\n                        },\n                        {\n                            \"type\": \"text\",\n                            \"text\": \"10\"\n                        },\n                        {\n                            \"type\": \"text\",\n                            \"text\": \"15755\"\n                        }\n                    ]\n                }\n            ]\n        }\n    }\n}"
						},
						"url": {
							"raw": "localhost:3000/notifications",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"notifications"
							]
						},
						"description": "Allows successfully creating new notification for the 360Dialog WhatsApp channel type."
					},
					"response": []
				},
				{
					"name": "Send 360Dialog WhatsApp Notification - Mismatch in ChannelType",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response is valid JSON\", function () {",
									"    pm.response.to.be.json;",
									"});",
									"pm.test(\"Response has valid 'status' and 'data' properties\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property(\"status\", \"success\");",
									"    pm.expect(jsonData).to.have.property(\"data\").to.be.an(\"object\");",
									"});",
									"pm.test(\"Response contains a valid 'notification' object\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.data).to.have.property(\"notification\").to.be.an(\"object\");",
									"});",
									"pm.test(\"Response 'channelType' is 3\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.data.notification).to.have.property(\"channelType\", 3);",
									"});",
									"pm.test(\"Response 'deliveryStatus' is 1\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.data.notification).to.have.property(\"deliveryStatus\", 1);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"uuid": "dec1b3ef-4157-4d1b-bb00-3441373d3cf8"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{apikey}}",
								"uuid": "c7e720d6-c244-4748-99ea-c16f7aabf3cb"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    // Assuming providerId 6 does not have channelType 3\n    \"providerId\": 6,\n    \"data\": {\n        \"to\": \"919004812051\",\n        \"type\": \"template\",\n        \"template\": {\n            \"namespace\": \"d8bcb6bd_2ab2_439c_9d9e_947501266c77\",\n            \"name\": \"ir_incident_resolution\",\n            \"language\": {\n                \"policy\": \"deterministic\",\n                \"code\": \"en\"\n            },\n            \"components\": [\n                {\n                    \"type\": \"body\",\n                    \"parameters\": [\n                        {\n                            \"type\": \"text\",\n                            \"text\": \"Bishal Biswas\"\n                        },\n                        {\n                            \"type\": \"text\",\n                            \"text\": \"WNK227\"\n                        },\n                        {\n                            \"type\": \"text\",\n                            \"text\": \"Massive Earthquake\"\n                        },\n                        {\n                            \"type\": \"text\",\n                            \"text\": \"Power Grid\"\n                        },\n                        {\n                            \"type\": \"text\",\n                            \"text\": \"Bishal Mondal\"\n                        },\n                        {\n                            \"type\": \"text\",\n                            \"text\": \"Vikas\"\n                        },\n                        {\n                            \"type\": \"text\",\n                            \"text\": \"Open\"\n                        },\n                        {\n                            \"type\": \"text\",\n                            \"text\": \"10\"\n                        },\n                        {\n                            \"type\": \"text\",\n                            \"text\": \"15755\"\n                        }\n                    ]\n                }\n            ]\n        }\n    }\n}"
						},
						"url": {
							"raw": "localhost:3000/notifications",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"notifications"
							]
						},
						"description": "Allows successfully creating new notification for the 360Dialog WhatsApp channel type."
					},
					"response": []
				},
				{
					"name": "Send 360Dialog WhatsApp Notification - Missing To Field",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response is valid JSON\", function () {",
									"    pm.response.to.be.json;",
									"});",
									"pm.test(\"Response for Invalid Data (Missing 'to' Value)\", function () {",
									"    pm.expect(pm.response.code).to.equal(400);",
									"    pm.expect(pm.response.json().status).to.equal(\"fail\");",
									"    pm.expect(pm.response.json().data[0]).to.equal(\"to should not be empty\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"uuid": "e2d563b6-f984-4ac5-904b-240134c60902"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{apikey}}",
								"uuid": "bb065389-eaa6-414e-8d31-52cf1a6463bb"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"providerId\": 3,\n    \"data\": {\n        \"type\": \"template\",\n        \"template\": {\n            \"namespace\": \"d8bcb6bd_2ab2_439c_9d9e_947501266c77\",\n            \"name\": \"ir_incident_resolution\",\n            \"language\": {\n                \"policy\": \"deterministic\",\n                \"code\": \"en\"\n            },\n            \"components\": [\n                {\n                    \"type\": \"body\",\n                    \"parameters\": [\n                        {\n                            \"type\": \"text\",\n                            \"text\": \"Bishal Biswas\"\n                        },\n                        {\n                            \"type\": \"text\",\n                            \"text\": \"WNK227\"\n                        },\n                        {\n                            \"type\": \"text\",\n                            \"text\": \"Massive Earthquake\"\n                        },\n                        {\n                            \"type\": \"text\",\n                            \"text\": \"Power Grid\"\n                        },\n                        {\n                            \"type\": \"text\",\n                            \"text\": \"Bishal Mondal\"\n                        },\n                        {\n                            \"type\": \"text\",\n                            \"text\": \"Vikas\"\n                        },\n                        {\n                            \"type\": \"text\",\n                            \"text\": \"Open\"\n                        },\n                        {\n                            \"type\": \"text\",\n                            \"text\": \"10\"\n                        },\n                        {\n                            \"type\": \"text\",\n                            \"text\": \"15755\"\n                        }\n                    ]\n                }\n            ]\n        }\n    }\n}"
						},
						"url": {
							"raw": "localhost:3000/notifications",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"notifications"
							]
						},
						"description": "Allows representing failure in creating new notification for the 360Dialog WhatsApp channel type when missing the `to` field."
					},
					"response": []
				},
				{
					"name": "Send 360Dialog WhatsApp Notification - Invalid API Key",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response is valid JSON\", function () {",
									"    pm.response.to.be.json;",
									"});",
									"pm.test(\"Failed request with invalid API key\", function () {",
									"    pm.expect(pm.response.code).to.equal(401);",
									"    pm.expect(pm.response.json().status).to.equal(\"fail\");",
									"    pm.expect(pm.response.json().data).to.equal(\"Invalid API key\");",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"uuid": "4b6cc6c9-8486-42b2-881d-7bde4de9aac5"
							},
							{
								"key": "Authorization",
								"value": "bad-api-key",
								"uuid": "d8e7f5c2-8903-4515-981f-a5a08569432c"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"providerId\": 3,\n    \"data\": {\n        \"to\": \"919004812051\",\n        \"type\": \"template\",\n        \"template\": {\n            \"namespace\": \"d8bcb6bd_2ab2_439c_9d9e_947501266c77\",\n            \"name\": \"ir_incident_resolution\",\n            \"language\": {\n                \"policy\": \"deterministic\",\n                \"code\": \"en\"\n            },\n            \"components\": [\n                {\n                    \"type\": \"body\",\n                    \"parameters\": [\n                        {\n                            \"type\": \"text\",\n                            \"text\": \"Bishal Biswas\"\n                        },\n                        {\n                            \"type\": \"text\",\n                            \"text\": \"WNK227\"\n                        },\n                        {\n                            \"type\": \"text\",\n                            \"text\": \"Massive Earthquake\"\n                        },\n                        {\n                            \"type\": \"text\",\n                            \"text\": \"Power Grid\"\n                        },\n                        {\n                            \"type\": \"text\",\n                            \"text\": \"Bishal Mondal\"\n                        },\n                        {\n                            \"type\": \"text\",\n                            \"text\": \"Vikas\"\n                        },\n                        {\n                            \"type\": \"text\",\n                            \"text\": \"Open\"\n                        },\n                        {\n                            \"type\": \"text\",\n                            \"text\": \"10\"\n                        },\n                        {\n                            \"type\": \"text\",\n                            \"text\": \"15755\"\n                        }\n                    ]\n                }\n            ]\n        }\n    }\n}"
						},
						"url": {
							"raw": "localhost:3000/notifications",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"notifications"
							]
						},
						"description": "Allows representing failure in creating new notification for the 360Dialog WhatsApp channel type when passing invalid API key."
					},
					"response": []
				}
			],
			"description": "Collection of requests pertaining to creating notifications for the 360Dialog WhatsApp channel type."
		},
		{
			"name": "Twilio WhatsApp Notifications",
			"item": [
				{
					"name": "Send Twilio WhatsApp Notification - Success",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response is valid JSON\", function () {",
									"    pm.response.to.be.json;",
									"});",
									"pm.test(\"Response has valid 'status' and 'data' properties\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property(\"status\", \"success\");",
									"    pm.expect(jsonData).to.have.property(\"data\").to.be.an(\"object\");",
									"});",
									"pm.test(\"Response contains a valid 'notification' object\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.data).to.have.property(\"notification\").to.be.an(\"object\");",
									"});",
									"pm.test(\"Response 'channelType' is 3\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.data.notification).to.have.property(\"channelType\", 3);",
									"});",
									"pm.test(\"Response 'deliveryStatus' is 1\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.data.notification).to.have.property(\"deliveryStatus\", 1);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"uuid": "9765c2dd-9c0f-4f98-8df8-c73c0db71ffc"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{apikey}}",
								"uuid": "34859926-808c-4e7d-97a1-7f8c0b1afeac"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    // Assuming providerId 4 also has channelType 4\n    \"providerId\": 4,\n    \"data\": {\n        \"to\": \"+919004812051\",\n        \"message\": \"Your appointment is coming up on July 21 at 3PM\"\n    }\n}"
						},
						"url": {
							"raw": "localhost:3000/notifications",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"notifications"
							]
						},
						"description": "Allows successfully creating new notification for the Twilio WhatsApp channel type."
					},
					"response": []
				},
				{
					"name": "Send Twilio WhatsApp Notification - Mismatch in ChannelType",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response is valid JSON\", function () {",
									"    pm.response.to.be.json;",
									"});",
									"pm.test(\"Response has valid 'status' and 'data' properties\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property(\"status\", \"success\");",
									"    pm.expect(jsonData).to.have.property(\"data\").to.be.an(\"object\");",
									"});",
									"pm.test(\"Response contains a valid 'notification' object\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.data).to.have.property(\"notification\").to.be.an(\"object\");",
									"});",
									"pm.test(\"Response 'channelType' is 3\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.data.notification).to.have.property(\"channelType\", 3);",
									"});",
									"pm.test(\"Response 'deliveryStatus' is 1\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.data.notification).to.have.property(\"deliveryStatus\", 1);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"uuid": "6d27576a-2413-46f0-99e3-6cc8b5f7a756"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{apikey}}",
								"uuid": "b09e3ce2-a24f-4dd1-9ebb-b37b7b6dd7e3"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    // Assuming providerId 6 does not have channelType 4\n    \"providerId\": 6,\n    \"data\": {\n        \"to\": \"+919004812051\",\n        \"message\": \"Your appointment is coming up on July 21 at 3PM\"\n    }\n}"
						},
						"url": {
							"raw": "localhost:3000/notifications",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"notifications"
							]
						},
						"description": "Allows successfully creating new notification for the Twilio WhatsApp channel type."
					},
					"response": []
				},
				{
					"name": "Send Twilio WhatsApp Notification - Missing To Field",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response is valid JSON\", function () {",
									"    pm.response.to.be.json;",
									"});",
									"pm.test(\"Response for Invalid Data (Missing 'to' Value)\", function () {",
									"    pm.expect(pm.response.code).to.equal(400);",
									"    pm.expect(pm.response.json().status).to.equal(\"fail\");",
									"    pm.expect(pm.response.json().data[0]).to.equal(\"to should not be empty\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"uuid": "ef1cfaf1-65c2-46d1-b12d-01e8cc5073ff"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{apikey}}",
								"uuid": "5a32aed1-1c6b-4aca-9251-62e87f1c8467"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"providerId\": 4,\n    \"data\": {\n        \"message\": \"Your appointment is coming up on July 21 at 3PM\"\n    }\n}"
						},
						"url": {
							"raw": "localhost:3000/notifications",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"notifications"
							]
						},
						"description": "Allows representing failure in creating new notification for the Twilio WhatsApp channel type when missing the `to` field."
					},
					"response": []
				},
				{
					"name": "Send Twilio WhatsApp Notification - Invalid API Key",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response is valid JSON\", function () {",
									"    pm.response.to.be.json;",
									"});",
									"pm.test(\"Failed request with invalid API key\", function () {",
									"    pm.expect(pm.response.code).to.equal(401);",
									"    pm.expect(pm.response.json().status).to.equal(\"fail\");",
									"    pm.expect(pm.response.json().data).to.equal(\"Invalid API key\");",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"uuid": "c69b6cde-16fd-4ad2-8cb9-14e634ba33e7"
							},
							{
								"key": "Authorization",
								"value": "bad-api-key",
								"uuid": "e0fba4cc-19e2-4d67-8e6a-93a2e24ed679"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"providerId\": 4,\n    \"data\": {\n        \"to\": \"+919004812051\",\n        \"message\": \"Your appointment is coming up on July 21 at 3PM\"\n    }\n}"
						},
						"url": {
							"raw": "localhost:3000/notifications",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"notifications"
							]
						},
						"description": "Allows representing failure in creating new notification for the Twilio WhatsApp channel type when passing invalid API key."
					},
					"response": []
				}
			],
			"description": "Collection of requests pertaining to creating notifications for the Twilio WhatsApp channel type."
		},
		{
			"name": "Twilio WhatsApp (Business) Notifications",
			"item": [
				{
					"name": "Send Twilio WhatsApp (Business) Notification - Success",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response is valid JSON\", function () {",
									"    pm.response.to.be.json;",
									"});",
									"pm.test(\"Response has valid 'status' and 'data' properties\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property(\"status\", \"success\");",
									"    pm.expect(jsonData).to.have.property(\"data\").to.be.an(\"object\");",
									"});",
									"pm.test(\"Response contains a valid 'notification' object\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.data).to.have.property(\"notification\").to.be.an(\"object\");",
									"});",
									"pm.test(\"Response 'channelType' is 7\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.data.notification).to.have.property(\"channelType\", 7);",
									"});",
									"pm.test(\"Response 'deliveryStatus' is 1\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.data.notification).to.have.property(\"deliveryStatus\", 1);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"uuid": "43c4a9ff-51d7-4b42-a2f9-5b7a48de8d0a"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{apikey}}",
								"uuid": "9d79f462-26b4-4d99-b1b0-0b676dce8e37"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  // Set your respective providerId\n  \"providerId\": 7,\n  \"data\": {\n    \"contentSid\": \"HXxxxxxxxxxxxxxxxxxxxx\",\n    \"from\": \"MGxxxxxxxxxxxxxxxxxxx\",\n    \"contentVariables\": {\n      \"1\": \"Name\",\n      \"2\": \"2\",\n      \"3\": \"29-04-2024\",\n      \"4\": \"03-05-2024\",\n      \"5\": \"Sunday, 05-05-2024\"\n    },\n    \"to\": \"+91xxxxxxxxxxx\"\n  }\n}"
						},
						"url": {
							"raw": "localhost:3000/notifications",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"notifications"
							]
						},
						"description": "Allows successfully creating new notification for the Twilio WhatsApp channel type."
					},
					"response": []
				},
				{
					"name": "Send Twilio WhatsApp (Business) Notification - Invalid Provider ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"uuid": "79b65c30-ba2c-4ed7-95b1-81cc73f59487"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{apikey}}",
								"uuid": "a73d1e14-827b-4fe6-94a9-f3e2159acb0e"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  // Set your respective providerId\n  \"providerId\": 77,\n  \"data\": {\n    \"contentSid\": \"HXxxxxxxxxxxxxxxxxxxxx\",\n    \"from\": \"MGxxxxxxxxxxxxxxxxxxx\",\n    \"contentVariables\": {\n      \"1\": \"Name\",\n      \"2\": \"2\",\n      \"3\": \"29-04-2024\",\n      \"4\": \"03-05-2024\",\n      \"5\": \"Sunday, 05-05-2024\"\n    },\n    \"to\": \"+91xxxxxxxxxxx\"\n  }\n}"
						},
						"url": {
							"raw": "localhost:3000/notifications",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"notifications"
							]
						},
						"description": "Allows successfully creating new notification for the Twilio WhatsApp channel type."
					},
					"response": []
				},
				{
					"name": "Send Twilio WhatsApp (Business) Notification - Missing To Field",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response is valid JSON\", function () {",
									"    pm.response.to.be.json;",
									"});",
									"pm.test(\"Response for Invalid Data (Missing 'to' Value)\", function () {",
									"    pm.expect(pm.response.code).to.equal(400);",
									"    pm.expect(pm.response.json().status).to.equal(\"fail\");",
									"    pm.expect(pm.response.json().data[0]).to.equal(\"to should not be empty\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"uuid": "cc3a5bb4-77b8-4d34-9c4d-de7b82331a46"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{apikey}}",
								"uuid": "71aab2d8-9042-40b0-8d1a-6be99b6983db"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  // Set your respective providerId\n  \"providerId\": 7,\n  \"data\": {\n    \"contentSid\": \"HXxxxxxxxxxxxxxxxxxxxx\",\n    \"from\": \"MGxxxxxxxxxxxxxxxxxxx\",\n    \"contentVariables\": {\n      \"1\": \"Name\",\n      \"2\": \"2\",\n      \"3\": \"29-04-2024\",\n      \"4\": \"03-05-2024\",\n      \"5\": \"Sunday, 05-05-2024\"\n    }\n  }\n}"
						},
						"url": {
							"raw": "localhost:3000/notifications",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"notifications"
							]
						},
						"description": "Allows representing failure in creating new notification for the Twilio WhatsApp channel type when missing the `to` field."
					},
					"response": []
				},
				{
					"name": "Send Twilio WhatsApp (Business) Notification - Invalid API Key",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"uuid": "26b25ac1-5aaf-4497-825c-3ceeee9c987a"
							},
							{
								"key": "Authorization",
								"value": "Bearer bad-api-key",
								"uuid": "70acd729-715f-4976-b030-242f4d764dad"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  // Set your respective providerId\n  \"providerId\": 7,\n  \"data\": {\n    \"contentSid\": \"HXxxxxxxxxxxxxxxxxxxxx\",\n    \"from\": \"MGxxxxxxxxxxxxxxxxxxx\",\n    \"contentVariables\": {\n      \"1\": \"Name\",\n      \"2\": \"2\",\n      \"3\": \"29-04-2024\",\n      \"4\": \"03-05-2024\",\n      \"5\": \"Sunday, 05-05-2024\"\n    },\n    \"to\": \"+91xxxxxxxxxxx\"\n  }\n}"
						},
						"url": {
							"raw": "localhost:3000/notifications",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"notifications"
							]
						},
						"description": "Allows representing failure in creating new notification for the Twilio WhatsApp channel type when passing invalid API key."
					},
					"response": []
				}
			],
			"description": "Collection of requests pertaining to creating notifications for the Twilio WhatsApp channel type using templates."
		},
		{
			"name": "Twilio SMS Notifications",
			"item": [
				{
					"name": "Send Twilio SMS Notification - Success",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response is valid JSON\", function () {",
									"  pm.response.to.be.json;",
									"});",
									"pm.test(\"Response has valid 'status' and 'data' properties\", function () {",
									"  var jsonData = pm.response.json();",
									"  pm.expect(jsonData).to.have.property(\"status\", \"success\");",
									"  pm.expect(jsonData).to.have.property(\"data\").to.be.an(\"object\");",
									"});",
									"pm.test(\"Response contains a valid 'notification' object\", function () {",
									"  var jsonData = pm.response.json();",
									"  pm.expect(jsonData.data).to.have.property(\"notification\").to.be.an(\"object\");",
									"});",
									"pm.test(\"Response 'channelType' is 5\", function () {",
									"  var jsonData = pm.response.json();",
									"  pm.expect(jsonData.data.notification).to.have.property(\"channelType\", 5);",
									"});",
									"pm.test(\"Response 'deliveryStatus' is 1\", function () {",
									"  var jsonData = pm.response.json();",
									"  pm.expect(jsonData.data.notification).to.have.property(\"deliveryStatus\", 1);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"uuid": "fad599dd-2217-4c7b-8a57-f84ae3001560"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{apikey}}",
								"uuid": "286c3715-2cb0-45d8-b804-1630c74e10fc"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    // Assuming providerId 5 also has channelType 5\n    \"providerId\": 5,\n    \"data\": {\n        \"to\": \"+15005550006\",\n        \"message\": \"Your appointment is coming up on March 21 at 2PM\"\n    }\n}"
						},
						"url": {
							"raw": "localhost:3000/notifications",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"notifications"
							]
						},
						"description": "Allows successfully creating new notification for the Twilio SMS channel type."
					},
					"response": []
				},
				{
					"name": "Send Twilio SMS Notification - Mismatch in ChannelType",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response is valid JSON\", function () {",
									"  pm.response.to.be.json;",
									"});",
									"pm.test(\"Response has valid 'status' and 'data' properties\", function () {",
									"  var jsonData = pm.response.json();",
									"  pm.expect(jsonData).to.have.property(\"status\", \"success\");",
									"  pm.expect(jsonData).to.have.property(\"data\").to.be.an(\"object\");",
									"});",
									"pm.test(\"Response contains a valid 'notification' object\", function () {",
									"  var jsonData = pm.response.json();",
									"  pm.expect(jsonData.data).to.have.property(\"notification\").to.be.an(\"object\");",
									"});",
									"pm.test(\"Response 'channelType' is 5\", function () {",
									"  var jsonData = pm.response.json();",
									"  pm.expect(jsonData.data.notification).to.have.property(\"channelType\", 5);",
									"});",
									"pm.test(\"Response 'deliveryStatus' is 1\", function () {",
									"  var jsonData = pm.response.json();",
									"  pm.expect(jsonData.data.notification).to.have.property(\"deliveryStatus\", 1);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"uuid": "003bc66d-6815-4f95-bf09-5acaf5f39460"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{apikey}}",
								"uuid": "56e7de7a-0422-4729-9251-28c96d1dea3e"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    // Assuming providerId 6 does not have channelType 5\n    \"providerId\": 6,\n    \"data\": {\n        \"to\": \"+15005550006\",\n        \"message\": \"Your appointment is coming up on March 21 at 2PM\"\n    }\n}"
						},
						"url": {
							"raw": "localhost:3000/notifications",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"notifications"
							]
						},
						"description": "Allows successfully creating new notification for the Twilio SMS channel type."
					},
					"response": []
				},
				{
					"name": "Send Twilio SMS Notification - Missing To Field",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response is valid JSON\", function () {",
									"  pm.response.to.be.json;",
									"});",
									"pm.test(\"Response for Invalid Data (Missing 'to' Value)\", function () {",
									"  pm.expect(pm.response.code).to.equal(400);",
									"  pm.expect(pm.response.json().status).to.equal(\"fail\");",
									"  pm.expect(pm.response.json().data[0]).to.equal(\"to should not be empty\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"uuid": "65f2437f-4cb2-4970-9a90-46b99591ac92"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{apikey}}",
								"uuid": "e577930c-ad3a-4873-a80f-342b7ca8e3fa"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"providerId\": 5,\n    \"data\": {\n        \"message\": \"Your appointment is coming up on March 21 at 2PM\"\n    }\n}"
						},
						"url": {
							"raw": "localhost:3000/notifications",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"notifications"
							]
						},
						"description": "Allows representing failure in creating new notification for the Twilio SMS channel type when missing the `to` field."
					},
					"response": []
				},
				{
					"name": "Send Twilio SMS Notification - Invalid API Key",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response is valid JSON\", function () {",
									"  pm.response.to.be.json;",
									"});",
									"pm.test(\"Failed request with invalid API key\", function () {",
									"  pm.expect(pm.response.code).to.equal(401);",
									"  pm.expect(pm.response.json().status).to.equal(\"fail\");",
									"  pm.expect(pm.response.json().data).to.equal(\"Invalid API key\");",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"uuid": "e9c945c7-71b3-4332-b626-bf7fa3d0aef2"
							},
							{
								"key": "Authorization",
								"value": "bad-api-key",
								"uuid": "ae14c44d-1b25-4db6-98b2-068beeb24fbf"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"providerId\": 5,\n    \"data\": {\n        \"to\": \"+15005550006\",\n        \"message\": \"Your appointment is coming up on March 21 at 2PM\"\n    }\n}"
						},
						"url": {
							"raw": "localhost:3000/notifications",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"notifications"
							]
						},
						"description": "Allows representing failure in creating new notification for the Twilio SMS channel type when passing invalid API key."
					},
					"response": []
				}
			],
			"description": "Collection of requests pertaining to creating notifications for the Twilio SMS channel type."
		},
		{
			"name": "Plivo SMS Notifications",
			"item": [
				{
					"name": "Send Plivo SMS Notification - Success",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response is valid JSON\", function () {",
									"  pm.response.to.be.json;",
									"});",
									"pm.test(\"Response has valid 'status' and 'data' properties\", function () {",
									"  var jsonData = pm.response.json();",
									"  pm.expect(jsonData).to.have.property(\"status\", \"success\");",
									"  pm.expect(jsonData).to.have.property(\"data\").to.be.an(\"object\");",
									"});",
									"pm.test(\"Response contains a valid 'notification' object\", function () {",
									"  var jsonData = pm.response.json();",
									"  pm.expect(jsonData.data).to.have.property(\"notification\").to.be.an(\"object\");",
									"});",
									"pm.test(\"Response 'channelType' is 5\", function () {",
									"  var jsonData = pm.response.json();",
									"  pm.expect(jsonData.data.notification).to.have.property(\"channelType\", 5);",
									"});",
									"pm.test(\"Response 'deliveryStatus' is 1\", function () {",
									"  var jsonData = pm.response.json();",
									"  pm.expect(jsonData.data.notification).to.have.property(\"deliveryStatus\", 1);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"uuid": "79ad3ef1-4d4b-4b6e-b149-d1e902a61b1e"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{apikey}}",
								"uuid": "6584bbe2-f89a-43bc-a577-df28b6bea236"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    // Assuming providerId 6 also has channelType 6\n    \"providerId\": 6,\n    \"data\": {\n        \"to\": \"+918900100002\",\n        \"message\": \"This is a test message from OsmoX\"\n    }\n}"
						},
						"url": {
							"raw": "localhost:3000/notifications",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"notifications"
							]
						},
						"description": "Allows successfully creating new notification for the Twilio SMS channel type."
					},
					"response": []
				},
				{
					"name": "Send Plivo SMS Notification - Mismatch in ChannelType",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response is valid JSON\", function () {",
									"  pm.response.to.be.json;",
									"});",
									"pm.test(\"Response has valid 'status' and 'data' properties\", function () {",
									"  var jsonData = pm.response.json();",
									"  pm.expect(jsonData).to.have.property(\"status\", \"success\");",
									"  pm.expect(jsonData).to.have.property(\"data\").to.be.an(\"object\");",
									"});",
									"pm.test(\"Response contains a valid 'notification' object\", function () {",
									"  var jsonData = pm.response.json();",
									"  pm.expect(jsonData.data).to.have.property(\"notification\").to.be.an(\"object\");",
									"});",
									"pm.test(\"Response 'channelType' is 5\", function () {",
									"  var jsonData = pm.response.json();",
									"  pm.expect(jsonData.data.notification).to.have.property(\"channelType\", 5);",
									"});",
									"pm.test(\"Response 'deliveryStatus' is 1\", function () {",
									"  var jsonData = pm.response.json();",
									"  pm.expect(jsonData.data.notification).to.have.property(\"deliveryStatus\", 1);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"uuid": "a7b5112e-a17c-45d0-84aa-15a2d997f676"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{apikey}}",
								"uuid": "a9819117-e3eb-4314-970d-fe4057114f66"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    // Assuming providerId 1 does not have channelType 6\n    \"providerId\": 1,\n    \"data\": {\n        \"to\": \"+918900100002\",\n        \"message\": \"This is a test message from OsmoX\"\n    }\n}"
						},
						"url": {
							"raw": "localhost:3000/notifications",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"notifications"
							]
						},
						"description": "Allows successfully creating new notification for the Twilio SMS channel type."
					},
					"response": []
				},
				{
					"name": "Send Plivo SMS Notification - Missing To Field",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response is valid JSON\", function () {",
									"  pm.response.to.be.json;",
									"});",
									"pm.test(\"Response for Invalid Data (Missing 'to' Value)\", function () {",
									"  pm.expect(pm.response.code).to.equal(400);",
									"  pm.expect(pm.response.json().status).to.equal(\"fail\");",
									"  pm.expect(pm.response.json().data[0]).to.equal(\"to should not be empty\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"uuid": "c95ac4ed-5d03-418a-9207-52b833abb9a2"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{apikey}}",
								"uuid": "3842547c-41ff-4ad0-b21e-fa767919d87b"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"providerId\": 6,\n    \"data\": {\n        \"message\": \"This is a test message from OsmoX\"\n    }\n}"
						},
						"url": {
							"raw": "localhost:3000/notifications",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"notifications"
							]
						},
						"description": "Allows representing failure in creating new notification for the Twilio SMS channel type when missing the `to` field."
					},
					"response": []
				},
				{
					"name": "Send Plivo SMS Notification - Invalid API Key",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response is valid JSON\", function () {",
									"  pm.response.to.be.json;",
									"});",
									"pm.test(\"Failed request with invalid API key\", function () {",
									"  pm.expect(pm.response.code).to.equal(401);",
									"  pm.expect(pm.response.json().status).to.equal(\"fail\");",
									"  pm.expect(pm.response.json().data).to.equal(\"Invalid API key\");",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"uuid": "4e62effd-b6a5-4a31-bc59-07fb063ca7d5"
							},
							{
								"key": "Authorization",
								"value": "bad-api-key",
								"uuid": "6ff0ce5b-1853-43a7-8805-7e2f239c4fcf"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"providerId\": 6,\n    \"data\": {\n        \"to\": \"+918900100002\",\n        \"message\": \"This is a test message from OsmoX\"\n    }\n}"
						},
						"url": {
							"raw": "localhost:3000/notifications",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"notifications"
							]
						},
						"description": "Allows representing failure in creating new notification for the Twilio SMS channel type when passing invalid API key."
					},
					"response": []
				}
			],
			"description": "Collection of requests pertaining to creating notifications for the Plivo SMS channel type."
		},
		{
			"name": "Authentication",
			"item": [
				{
					"name": "Login - Success",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response is valid JSON\", function () {",
									"    pm.response.to.be.json;",
									"});",
									"pm.test(\"Response has valid 'data' property\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property(\"data\").to.be.an(\"object\");",
									"});",
									"pm.test(\"Response contains a valid 'login' object\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.data).to.have.property(\"login\").to.be.an(\"object\");",
									"});",
									"pm.test(\"Response contains valid 'token' and 'user' values\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.data.login).to.have.property(\"token\").to.be.a(\"string\");",
									"    pm.expect(jsonData.data.login).to.have.property(\"user\").to.be.a(\"string\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"uuid": "778470f7-5985-4b48-8578-7f85edb33076"
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation LoginUser($username: String!, $password: String!) {\n  login(loginUserInput: {username: $username, password: $password}) {\n    token\n    user\n    allKeys {\n       apiKeyId\n       apiKey\n       applicationId\n       status\n    }\n    __typename\n  }\n}",
								"operationName": "LoginUser",
								"variables": "{\n  \"username\": \"{{adminUsername}}\",\n  \"password\": \"{{adminPassword}}\"\n}"
							}
						},
						"url": {
							"raw": "http://localhost:3000/graphql",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"graphql"
							]
						},
						"description": "Allows successfully logging in and obtaining the auth token from API."
					},
					"response": []
				},
				{
					"name": "Login - Invalid credentials",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response is valid JSON\", function () {",
									"    pm.response.to.be.json;",
									"});",
									"pm.test(\"Response for failed login with invalid credentials\", function () {",
									"    pm.expect(pm.response.code).to.equal(200);",
									"    pm.expect(pm.response.json().data).to.equal(null);",
									"    pm.expect(pm.response.json().errors).to.be.an(\"array\");",
									"    pm.expect(pm.response.json().errors[0].message).to.equal(\"Invalid username or password\");",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"uuid": "d48a9865-06dd-4d38-a7a5-becbdef345dc"
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation LoginUser($username: String!, $password: String!) {\n  login(loginUserInput: {username: $username, password: $password}) {\n    token\n    user\n    allKeys {\n       apiKeyId\n       apiKey\n       applicationId\n       status\n    }\n    __typename\n  }\n}",
								"operationName": "LoginUser",
								"variables": "{\n  \"username\": \"{{adminUsername}}\",\n  \"password\": \"abc{{adminPassword}}\"\n}"
							}
						},
						"url": {
							"raw": "http://localhost:3000/graphql",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"graphql"
							]
						},
						"description": "Allows representing failure while logging in when passing invalid credentials."
					},
					"response": []
				},
				{
					"name": "Login - Missing password",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response is valid JSON\", function () {",
									"    pm.response.to.be.json;",
									"});",
									"pm.test(\"Response for failed login with missing password\", function () {",
									"    pm.expect(pm.response.code).to.equal(400);",
									"    pm.expect(pm.response.json().errors).to.be.an(\"array\");",
									"    pm.expect(pm.response.json().errors[0].message).to.equal(\"Field \\\"LoginUserInput.password\\\" of required type \\\"String!\\\" was not provided.\");",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"uuid": "d64daeb6-5161-477b-b895-a9afdf7aef25"
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation LoginUser($username: String!) {\n  login(loginUserInput: {username: $username}) {\n    token\n    user\n    allKeys {\n       apiKeyId\n       apiKey\n       applicationId\n       status\n    }\n    __typename\n  }\n}",
								"operationName": "LoginUser",
								"variables": "{\n  \"username\": \"{{adminUsername}}\"\n}"
							}
						},
						"url": {
							"raw": "http://localhost:3000/graphql",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"graphql"
							]
						},
						"description": "Allows representing failure while logging in when missing `password` value."
					},
					"response": []
				},
				{
					"name": "Login - Bad request",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response is valid JSON\", function () {",
									"    pm.response.to.be.json;",
									"});",
									"pm.test(\"Response for failed login with bad request\", function () {",
									"    pm.expect(pm.response.code).to.equal(400);",
									"    pm.expect(pm.response.json().errors).to.be.an(\"array\");",
									"    pm.expect(pm.response.json().errors[0].message).to.be.a(\"string\");",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"uuid": "3d0dc04a-8f43-4676-a052-c81f41ee0ec5"
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation LoginUser($username: String!, $password: String!) {\n  login(loginUserInput: {username: $username, password: $password}) {\n    token\n    users\n    allKeys {\n       apiKeyId\n       apiKey\n       applicationId\n       status\n    }\n    __typename\n  }\n}",
								"operationName": "LoginUser",
								"variables": "{\n  \"username\": \"{{adminUsername}}\",\n  \"password\": \"{{adminPassword}}\"\n}"
							}
						},
						"url": {
							"raw": "http://localhost:3000/graphql",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"graphql"
							]
						},
						"description": "Allows representing failure while logging in when using invalid/bad request."
					},
					"response": []
				}
			],
			"description": "Collection of requests pertaining to authentication related requests such as login."
		},
		{
			"name": "All Notifications",
			"item": [
				{
					"name": "Fetch All Notifications - Success",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response is valid JSON\", function () {",
									"    pm.response.to.be.json;",
									"});",
									"pm.test(\"Response has valid 'data' property\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property(\"data\").to.be.an(\"object\");",
									"});",
									"pm.test(\"Response contains a valid 'notifications' object\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.data).to.have.property(\"notifications\").to.be.an(\"object\");",
									"});",
									"pm.test(\"Response contains a valid 'notifications' array\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.data.notifications).to.have.property(\"notifications\").to.be.an(\"array\");",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{apikey}}",
								"uuid": "4cd65a99-ae4b-4c47-bf92-3749481772a9"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"uuid": "4d3c208b-a0c1-47cb-a347-3eddb7c695f8"
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query {\r\n  notifications(\r\n    options: {\r\n      limit: 5\r\n      offset: 0\r\n      sortBy: \"createdOn\"\r\n      sortOrder: DESC\r\n      search: \"sender@email.com\"\r\n      filters: [{ field: \"channelType\", operator: \"eq\", value: \"1\" }]\r\n    }\r\n  ) {\r\n    notifications {\r\n      applicationDetails {\r\n        applicationId\r\n        name\r\n        userId\r\n        status\r\n        createdOn\r\n        updatedOn\r\n      }\r\n      applicationId\r\n      channelType\r\n      createdBy\r\n      createdOn\r\n      data\r\n      deliveryStatus\r\n      id\r\n      providerId\r\n      result\r\n      status\r\n      updatedBy\r\n      updatedOn\r\n    }\r\n    total,\r\n    offset,\r\n    limit\r\n  }\r\n}",
								"variables": ""
							}
						},
						"url": {
							"raw": "http://localhost:3000/graphql",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"graphql"
							]
						},
						"description": "Allows successfully fetching all notifications based on the options passed."
					},
					"response": []
				},
				{
					"name": "Fetch All Notifications - Bad request",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response is valid JSON\", function () {",
									"    pm.response.to.be.json;",
									"});",
									"pm.test(\"Response for fetching notifications with bad request\", function () {",
									"    pm.expect(pm.response.code).to.equal(400);",
									"    pm.expect(pm.response.json().errors).to.be.an(\"array\");",
									"    pm.expect(pm.response.json().errors[0].message).to.be.a(\"string\");",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{apikey}}",
								"uuid": "ae0d24c8-b2e5-40ee-89e3-c4743f3ff32d"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"uuid": "cc4181a0-27f9-4fb3-986c-a2a4430d2013"
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query {\r\n  notifications(\r\n    options: {\r\n      unknownValue: \"Some unknown parameter\"\r\n      limit: 5\r\n      offset: 0\r\n      sortBy: \"createdOn\"\r\n      sortOrder: DESC\r\n      search: \"sender@email.com\"\r\n      filters: [{ field: \"channelType\", operator: \"eq\", value: \"1\" }]\r\n    }\r\n  ) {\r\n    notifications {\r\n      applicationDetails {\r\n        applicationId\r\n        name\r\n        userId\r\n        status\r\n        createdOn\r\n        updatedOn\r\n      }\r\n      applicationId\r\n      channelType\r\n      createdBy\r\n      createdOn\r\n      data\r\n      deliveryStatus\r\n      id\r\n      providerId\r\n      result\r\n      status\r\n      updatedBy\r\n      updatedOn\r\n    }\r\n    total,\r\n    offset,\r\n    limit\r\n  }\r\n}",
								"variables": ""
							}
						},
						"url": {
							"raw": "http://localhost:3000/graphql",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"graphql"
							]
						},
						"description": "Allows representing failure when fetching all notifications when using invalid/bad request."
					},
					"response": []
				}
			],
			"description": "Collection of requests pertaining to fetching all notifications."
		},
		{
			"name": "Notification by Id",
			"item": [
				{
					"name": "Fetch Notification by ID - Success",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "FoundationX-test-key",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:3000/notifications/1",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"notifications",
								"1"
							]
						}
					},
					"response": []
				}
			],
			"description": "Collection of requests pertaining to fetching single notification by Id"
		},
		{
			"name": "All Applications",
			"item": [
				{
					"name": "Fetch all Applications - Success",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "mysecretadminkey",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query {\r\n  applications(\r\n    options: {\r\n      limit: 5\r\n      offset: 0\r\n      sortBy: \"createdOn\"\r\n      sortOrder: ASC\r\n      search: \"key\"\r\n      filters: [{ field: \"applicationId\", operator: \"eq\", value: \"1\" }]\r\n    }\r\n  ) {\r\n    applications {\r\n        applicationId\r\n        name\r\n        userId\r\n        createdOn\r\n        updatedOn\r\n        status\r\n    }\r\n    total,\r\n    offset,\r\n    limit\r\n  }\r\n}",
								"variables": ""
							}
						},
						"url": {
							"raw": "http://localhost:3000/graphql",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Fetch all Applications - Bad Request",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "mysecretadminkey",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query {\r\n  applications(\r\n    options: {\r\n      unknownValue: \"Some unknown parameter\"\r\n      limit: 5\r\n      offset: 0\r\n      sortBy: \"createdOn\"\r\n      sortOrder: ASC\r\n      search: \"key\"\r\n      filters: [{ field: \"applicationId\", operator: \"eq\", value: \"1\" }]\r\n    }\r\n  ) {\r\n    applications {\r\n        applicationId\r\n        name\r\n        userId\r\n        createdOn\r\n        updatedOn\r\n        status\r\n    }\r\n    total,\r\n    offset,\r\n    limit\r\n  }\r\n}",
								"variables": ""
							}
						},
						"url": {
							"raw": "http://localhost:3000/graphql",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				}
			],
			"description": "Collection of requests pertaining to fetching all applications."
		},
		{
			"name": "New Application",
			"item": [
				{
					"name": "Create new Application - Success",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "mysecretadminkey",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation CreateApplication {\r\n    application(createApplicationInput: {\r\n        name: \"sampleFoundationXApp\",\r\n        userId: 2,\r\n    }) {\r\n        applicationId\r\n        name\r\n        userId\r\n        createdOn\r\n        updatedOn\r\n        status\r\n    }\r\n}",
								"variables": ""
							}
						},
						"url": {
							"raw": "http://localhost:3000/graphql",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create new Application - Bad Request",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "mysecretadminkey",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation CreateApplication {\r\n    application(createApplicationInput: {\r\n        unknownValue: \"Some unknown parameter\"\r\n        name: \"sampleFoundationXApp\",\r\n        userId: 2,\r\n    }) {\r\n        applicationId\r\n        name\r\n        userId\r\n        createdOn\r\n        updatedOn\r\n        status\r\n    }\r\n}",
								"variables": ""
							}
						},
						"url": {
							"raw": "http://localhost:3000/graphql",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				}
			],
			"description": "Collection of requests pertaining to creating new application."
		},
		{
			"name": "All Providers",
			"item": [
				{
					"name": "Fetch all Providers - Success",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "OsmoX-test-key",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query {\r\n  providers(\r\n    options: {\r\n      limit: 5\r\n      offset: 0\r\n      sortBy: \"createdOn\"\r\n      sortOrder: ASC\r\n    }\r\n  ) {\r\n    providers {\r\n        providerId\r\n        name\r\n        channelType\r\n        configuration\r\n        isEnabled\r\n        userId\r\n        createdOn\r\n        updatedOn\r\n        status\r\n    }\r\n    total,\r\n    offset,\r\n    limit\r\n  }\r\n}",
								"variables": ""
							}
						},
						"url": {
							"raw": "http://localhost:3000/graphql",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Fetch all Providers - Bad Request",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "mysecretadminkey",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query {\r\n  providers(\r\n    options: {\r\n      limit: 5\r\n      offset: 0\r\n      sortBy: \"createdOn\"\r\n      unknownValue: \"Some unknown parameter\"\r\n      sortOrder: ASC\r\n    }\r\n  ) {\r\n    providers {\r\n        providerId\r\n        name\r\n        channelType\r\n        configuration\r\n        isEnabled\r\n        userId\r\n        createdOn\r\n        updatedOn\r\n        status\r\n    }\r\n    total,\r\n    offset,\r\n    limit\r\n  }\r\n}",
								"variables": ""
							}
						},
						"url": {
							"raw": "http://localhost:3000/graphql",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				}
			],
			"description": "Collection of requests pertaining to fetching all applications."
		},
		{
			"name": "New Provider",
			"item": [
				{
					"name": "Create new Provider - Success",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "OsmoX-test-key",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation CreateProvider {\n    provider(createProviderInput: {\n        applicationId: 5,\n        channelType: 2,\n        configuration: {},\n        isEnabled: 1,\n        name: \"Mailgun PineStem\",\n        userId: 1,\n    }) {\n        applicationId\n        channelType\n        configuration\n        isEnabled\n        name\n        userId\n        createdOn\n        updatedOn\n        status\n    }\n}",
								"variables": ""
							}
						},
						"url": {
							"raw": "http://localhost:3000/graphql",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create new Provider - Bad Request",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "OsmoX-test-key",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation CreateProvider {\n    provider(createProviderInput: {\n        applicationId: 5,\n        unknownValue: \"Some unknown parameter\",\n        channelType: 2,\n        configuration: {},\n        isEnabled: 1,\n        name: \"Mailgun PineStem\",\n        userId: 1,\n    }) {\n        applicationId\n        channelType\n        configuration\n        isEnabled\n        name\n        userId\n        createdOn\n        updatedOn\n        status\n    }\n}",
								"variables": ""
							}
						},
						"url": {
							"raw": "http://localhost:3000/graphql",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Push Notification",
			"item": [
				{
					"name": "PushNotifiation_Android",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"uuid": "781a9d80-3b08-4149-8d07-c348bca08bf3"
							},
							{
								"key": "x-api-key",
								"value": "OsmoX-test-key",
								"uuid": "2ad1dbf3-89a0-4fa1-8b67-9dce6f2c524f"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \n    \"providerId\": 10,\n    \"data\": {\n        \"message\": {\n            \"GCM\": \"{\\\"notification\\\":{\\\"title\\\":\\\"Test Notification\\\",\\\"body\\\":\\\"This is a test notification\\\"}}\"},\n        \"target\": \"arn:aws:sns:us-west-2:505884080245:endpoint/GCM/OQSHA-Android/7fb080a5-a5e9-38f0-98fe-ebd0396e0076\" \n        \n    }\n}"
						},
						"url": {
							"raw": "localhost:3000/notifications",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"notifications"
							]
						}
					},
					"response": []
				},
				{
					"name": "PushNotification_IOS",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"uuid": "90889547-1c38-4be2-a6db-fc03bb0f489f"
							},
							{
								"key": "x-api-key",
								"value": "OsmoX-test-key",
								"uuid": "09ca413e-4431-4474-87e5-dbca43da369e"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    // Assuming providerId 10 also has channelType 4\n    \"providerId\": 10,\n    \"data\": {\n        \"message\": {\n             \"APNS_SANDBOX\": \"{\\\"aps\\\":{\\\"alert\\\":{\\\"title\\\":\\\"Hello World\\\",\\\"body\\\":\\\"This is a test message\\\"},\\\"sound\\\":\\\"default\\\"}}\"\n        },\n        // \"target\": \"arn:aws:sns:us-west-2:505884080245:endpoint/GCM/OQSHA-Android/7fb080a5-a5e9-38f0-98fe-ebd0396e0076\" \n        \"target\": \"arn:aws:sns:us-west-2:505884080245:endpoint/APNS_SANDBOX/OQSHA-iOS-Dev/57711edf-6265-32fc-be15-1a0cfdcad72e\"\n    }\n}"
						},
						"url": {
							"raw": "localhost:3000/notifications",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"notifications"
							]
						}
					},
					"response": []
				}
			],
			"description": "Request to add push notification"
		},
		{
			"name": "Webhook",
			"item": [
				{
					"name": "Register Webhook",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "OsmoX-test-key",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"uuid": "ed891341-a3f0-47c6-ab21-411854882e7d"
							},
							{
								"key": "x-api-key",
								"value": "OsmoX-test-key",
								"uuid": "21780551-3bf5-40a2-82eb-a5b98404e227"
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation RegisterWebhook {\n    webhook(createWebhookInput: {\n        providerId: 10,\n        webhookUrl: \"http://localhost:4200/webhook\",\n    }) {\n        webhookUrl\n        providerId\n        createdOn\n        updatedOn\n        status\n    }\n}",
								"variables": ""
							}
						},
						"url": {
							"raw": "http://localhost:3000/graphql",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				}
			]
		}
	]
}