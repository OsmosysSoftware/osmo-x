{
	"info": {
		"_postman_id": "8254490e-876a-4634-b836-3a35201489e4",
		"name": "OsmoX",
		"description": "OsmoX API helps creating new notifications, fetching existing notifications as well as perform authorization related tasks.",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "20654268"
	},
	"item": [
		{
			"name": "SMTP Notifications",
			"item": [
				{
					"name": "Send SMTP Notification - Success",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response is valid JSON\", function () {",
									"    pm.response.to.be.json;",
									"});",
									"pm.test(\"Response has valid 'status' and 'data' properties\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property(\"status\", \"success\");",
									"    pm.expect(jsonData).to.have.property(\"data\").to.be.an(\"object\");",
									"});",
									"pm.test(\"Response contains a valid 'notification' object\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.data).to.have.property(\"notification\").to.be.an(\"object\");",
									"});",
									"pm.test(\"Response 'channelType' is 1\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.data.notification).to.have.property(\"channelType\", 1);",
									"});",
									"pm.test(\"Response 'deliveryStatus' is 1\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.data.notification).to.have.property(\"deliveryStatus\", 1);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"uuid": "c1b98bda-791c-4afe-975b-8271b44885c5"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{apikey}}",
								"uuid": "bd18e8b1-4870-4608-8159-296c7e423270"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    // Assuming providerId 1 also has channelType 1\n    \"providerId\": 1,\n    \"data\": {\n        \"from\": \"jacuzisplot@gmail.com\",\n        \"to\": \"vikas.k@osmosys.co\",\n        \"subject\": \"Test subject\",\n        \"text\": \"This is a test notification\",\n        \"html\": \"<b>This is a test notification</b>\"\n    }\n}"
						},
						"url": {
							"raw": "localhost:3000/notifications",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"notifications"
							]
						},
						"description": "Allows successfully creating new notification for the SMTP channel type."
					},
					"response": []
				},
				{
					"name": "Send SMTP Notification - Mismatch in ChannelType",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response is valid JSON\", function () {",
									"    pm.response.to.be.json;",
									"});",
									"pm.test(\"Response has valid 'status' and 'data' properties\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property(\"status\", \"success\");",
									"    pm.expect(jsonData).to.have.property(\"data\").to.be.an(\"object\");",
									"});",
									"pm.test(\"Response contains a valid 'notification' object\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.data).to.have.property(\"notification\").to.be.an(\"object\");",
									"});",
									"pm.test(\"Response 'channelType' is 1\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.data.notification).to.have.property(\"channelType\", 1);",
									"});",
									"pm.test(\"Response 'deliveryStatus' is 1\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.data.notification).to.have.property(\"deliveryStatus\", 1);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"uuid": "29a6efc5-1e62-4a79-9a83-420599844cfc"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{apikey}}",
								"uuid": "972a9b0c-546d-4e69-abfa-884b6e5998c3"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    // Assuming providerId 6 does not have channelType 1\n    \"providerId\": 6,\n    \"data\": {\n        \"from\": \"jacuzisplot@gmail.com\",\n        \"to\": \"vikas.k@osmosys.co\",\n        \"subject\": \"Test subject\",\n        \"text\": \"This is a test notification\",\n        \"html\": \"<b>This is a test notification</b>\"\n    }\n}"
						},
						"url": {
							"raw": "localhost:3000/notifications",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"notifications"
							]
						},
						"description": "Allows successfully creating new notification for the SMTP channel type."
					},
					"response": []
				},
				{
					"name": "Send SMTP Notification - Missing To Field",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response is valid JSON\", function () {",
									"    pm.response.to.be.json;",
									"});",
									"pm.test(\"Response for Invalid Data (Missing 'to' Value)\", function () {",
									"    pm.expect(pm.response.code).to.equal(400);",
									"    pm.expect(pm.response.json().status).to.equal(\"fail\");",
									"    pm.expect(pm.response.json().data[0]).to.equal(\"to should not be empty\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"uuid": "8bbe60c5-f8f1-42e4-9ea6-3453b896c502"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{apikey}}",
								"uuid": "31d371a8-8278-4e46-8f02-0181401b2cec"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"providerId\": 1,\n    \"data\": {\n        \"from\": \"vikaskyatannawar@gmail.com\",\n        \"subject\": \"Test subject\",\n        \"text\": \"This is a test notification\",\n        \"html\": \"<b>This is a test notification</b>\"\n    }\n}"
						},
						"url": {
							"raw": "localhost:3000/notifications",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"notifications"
							]
						},
						"description": "Allows representing failure in creating new notification for the SMTP channel type when missing the `to` field."
					},
					"response": []
				},
				{
					"name": "Send SMTP Notification - Invalid API Key",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response is valid JSON\", function () {",
									"    pm.response.to.be.json;",
									"});",
									"pm.test(\"Failed request with invalid API key\", function () {",
									"    pm.expect(pm.response.code).to.equal(401);",
									"    pm.expect(pm.response.json().status).to.equal(\"fail\");",
									"    pm.expect(pm.response.json().data).to.equal(\"Invalid API key\");",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"uuid": "8bc9dca8-55c7-4059-9884-5f7a57429161"
							},
							{
								"key": "Authorization",
								"value": "bad-api-key",
								"uuid": "a1048fb4-0d89-436b-a1bb-da9d8b6f02b2"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"providerId\": 1,\n    \"data\": {\n        \"from\": \"vikaskyatannawar@gmail.com\",\n        \"to\": \"vikas.k@osmosys.co\",\n        \"subject\": \"Test subject\",\n        \"text\": \"This is a test notification\",\n        \"html\": \"<b>This is a test notification</b>\"\n    }\n}"
						},
						"url": {
							"raw": "localhost:3000/notifications",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"notifications"
							]
						},
						"description": "Allows representing failure in creating new notification for the SMTP channel type when passing invalid API key."
					},
					"response": []
				}
			],
			"description": "Collection of requests pertaining to creating notifications for the SMTP channel type."
		},
		{
			"name": "Mailgun Notifications",
			"item": [
				{
					"name": "Send Mailgun Notification - Success",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response is valid JSON\", function () {",
									"    pm.response.to.be.json;",
									"});",
									"pm.test(\"Response has valid 'status' and 'data' properties\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property(\"status\", \"success\");",
									"    pm.expect(jsonData).to.have.property(\"data\").to.be.an(\"object\");",
									"});",
									"pm.test(\"Response contains a valid 'notification' object\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.data).to.have.property(\"notification\").to.be.an(\"object\");",
									"});",
									"pm.test(\"Response 'channelType' is 2\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.data.notification).to.have.property(\"channelType\", 2);",
									"});",
									"pm.test(\"Response 'deliveryStatus' is 1\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.data.notification).to.have.property(\"deliveryStatus\", 1);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"uuid": "9fe42ddc-a1a2-4d71-b079-304732fc4a01"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{apikey}}",
								"uuid": "1928738d-7310-425a-8826-74aaa52d4f72"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    // Assuming providerId 2 also has channelType 2\n    \"providerId\": 2,\n    \"data\": {\n        \"from\": \"vikaskyatannawar@gmail.com\",\n        \"to\": \"vikas.k@osmosys.co\",\n        \"subject\": \"Test subject\",\n        \"text\": \"This is a test notification\",\n        \"html\": \"<b>This is a test notification</b>\"\n    }\n}"
						},
						"url": {
							"raw": "localhost:3000/notifications",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"notifications"
							]
						},
						"description": "Allows successfully creating new notification for the Mailgun channel type."
					},
					"response": []
				},
				{
					"name": "Send Mailgun Notification - Mismatch in ChannelType",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response is valid JSON\", function () {",
									"    pm.response.to.be.json;",
									"});",
									"pm.test(\"Response has valid 'status' and 'data' properties\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property(\"status\", \"success\");",
									"    pm.expect(jsonData).to.have.property(\"data\").to.be.an(\"object\");",
									"});",
									"pm.test(\"Response contains a valid 'notification' object\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.data).to.have.property(\"notification\").to.be.an(\"object\");",
									"});",
									"pm.test(\"Response 'channelType' is 2\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.data.notification).to.have.property(\"channelType\", 2);",
									"});",
									"pm.test(\"Response 'deliveryStatus' is 1\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.data.notification).to.have.property(\"deliveryStatus\", 1);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"uuid": "949051ca-f2ce-4d0a-89cc-c56403e961e3"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{apikey}}",
								"uuid": "36adcf20-8766-41ed-83ae-e76cd302dd6e"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    // Assuming providerId 6 does not have channelType 2\n    \"providerId\": 6,\n    \"data\": {\n        \"from\": \"vikaskyatannawar@gmail.com\",\n        \"to\": \"vikas.k@osmosys.co\",\n        \"subject\": \"Test subject\",\n        \"text\": \"This is a test notification\",\n        \"html\": \"<b>This is a test notification</b>\"\n    }\n}"
						},
						"url": {
							"raw": "localhost:3000/notifications",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"notifications"
							]
						},
						"description": "Allows successfully creating new notification for the Mailgun channel type."
					},
					"response": []
				},
				{
					"name": "Send Mailgun Notification - Missing To Field",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response is valid JSON\", function () {",
									"    pm.response.to.be.json;",
									"});",
									"pm.test(\"Response for Invalid Data (Missing 'to' Value)\", function () {",
									"    pm.expect(pm.response.code).to.equal(400);",
									"    pm.expect(pm.response.json().status).to.equal(\"fail\");",
									"    pm.expect(pm.response.json().data[0]).to.equal(\"to should not be empty\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"uuid": "46d534d7-80a3-417d-8e43-a0b43c2a9d7d"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{apikey}}",
								"uuid": "c22a3b02-7c16-4f8d-ae2b-eacfdd064677"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"providerId\": 2,\n    \"data\": {\n        \"from\": \"vikaskyatannawar@gmail.com\",\n        \"subject\": \"Test subject\",\n        \"text\": \"This is a test notification\",\n        \"html\": \"<b>This is a test notification</b>\"\n    }\n}"
						},
						"url": {
							"raw": "localhost:3000/notifications",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"notifications"
							]
						},
						"description": "Allows representing failure in creating new notification for the Mailgun channel type when missing the `to` field."
					},
					"response": []
				},
				{
					"name": "Send Mailgun Notification - Invalid API Key",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response is valid JSON\", function () {",
									"    pm.response.to.be.json;",
									"});",
									"pm.test(\"Failed request with invalid API key\", function () {",
									"    pm.expect(pm.response.code).to.equal(401);",
									"    pm.expect(pm.response.json().status).to.equal(\"fail\");",
									"    pm.expect(pm.response.json().data).to.equal(\"Invalid API key\");",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"uuid": "bb1fa870-7662-4a2e-a3f8-d003cd00e7fa"
							},
							{
								"key": "Authorization",
								"value": "bad-api-key",
								"uuid": "66dc3098-a7f0-4fea-afe5-72569ee64895"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"providerId\": 2,\n    \"data\": {\n        \"from\": \"vikaskyatannawar@gmail.com\",\n        \"to\": \"vikas.k@osmosys.co\",\n        \"subject\": \"Test subject\",\n        \"text\": \"This is a test notification\",\n        \"html\": \"<b>This is a test notification</b>\"\n    }\n}"
						},
						"url": {
							"raw": "localhost:3000/notifications",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"notifications"
							]
						},
						"description": "Allows representing failure in creating new notification for the Mailgun channel type when passing invalid API key."
					},
					"response": []
				}
			],
			"description": "Collection of requests pertaining to creating notifications for the Mailgun channel type."
		},
		{
			"name": "360Dialog WhatsApp Notifications",
			"item": [
				{
					"name": "Send 360Dialog WhatsApp Notification - Success",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response is valid JSON\", function () {",
									"    pm.response.to.be.json;",
									"});",
									"pm.test(\"Response has valid 'status' and 'data' properties\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property(\"status\", \"success\");",
									"    pm.expect(jsonData).to.have.property(\"data\").to.be.an(\"object\");",
									"});",
									"pm.test(\"Response contains a valid 'notification' object\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.data).to.have.property(\"notification\").to.be.an(\"object\");",
									"});",
									"pm.test(\"Response 'channelType' is 3\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.data.notification).to.have.property(\"channelType\", 3);",
									"});",
									"pm.test(\"Response 'deliveryStatus' is 1\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.data.notification).to.have.property(\"deliveryStatus\", 1);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"uuid": "664db212-06d9-4e50-a3b7-3f8555df0cad"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{apikey}}",
								"uuid": "e7230be9-a6a0-4668-b3d5-6ca82338feaa"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    // Assuming providerId 3 also has channelType 3\n    \"providerId\": 3,\n    \"data\": {\n        \"to\": \"919004812051\",\n        \"type\": \"template\",\n        \"template\": {\n            \"namespace\": \"d8bcb6bd_2ab2_439c_9d9e_947501266c77\",\n            \"name\": \"ir_incident_resolution\",\n            \"language\": {\n                \"policy\": \"deterministic\",\n                \"code\": \"en\"\n            },\n            \"components\": [\n                {\n                    \"type\": \"body\",\n                    \"parameters\": [\n                        {\n                            \"type\": \"text\",\n                            \"text\": \"Bishal Biswas\"\n                        },\n                        {\n                            \"type\": \"text\",\n                            \"text\": \"WNK227\"\n                        },\n                        {\n                            \"type\": \"text\",\n                            \"text\": \"Massive Earthquake\"\n                        },\n                        {\n                            \"type\": \"text\",\n                            \"text\": \"Power Grid\"\n                        },\n                        {\n                            \"type\": \"text\",\n                            \"text\": \"Bishal Mondal\"\n                        },\n                        {\n                            \"type\": \"text\",\n                            \"text\": \"Vikas\"\n                        },\n                        {\n                            \"type\": \"text\",\n                            \"text\": \"Open\"\n                        },\n                        {\n                            \"type\": \"text\",\n                            \"text\": \"10\"\n                        },\n                        {\n                            \"type\": \"text\",\n                            \"text\": \"15755\"\n                        }\n                    ]\n                }\n            ]\n        }\n    }\n}"
						},
						"url": {
							"raw": "localhost:3000/notifications",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"notifications"
							]
						},
						"description": "Allows successfully creating new notification for the 360Dialog WhatsApp channel type."
					},
					"response": []
				},
				{
					"name": "Send 360Dialog WhatsApp Notification - Mismatch in ChannelType",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response is valid JSON\", function () {",
									"    pm.response.to.be.json;",
									"});",
									"pm.test(\"Response has valid 'status' and 'data' properties\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property(\"status\", \"success\");",
									"    pm.expect(jsonData).to.have.property(\"data\").to.be.an(\"object\");",
									"});",
									"pm.test(\"Response contains a valid 'notification' object\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.data).to.have.property(\"notification\").to.be.an(\"object\");",
									"});",
									"pm.test(\"Response 'channelType' is 3\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.data.notification).to.have.property(\"channelType\", 3);",
									"});",
									"pm.test(\"Response 'deliveryStatus' is 1\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.data.notification).to.have.property(\"deliveryStatus\", 1);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"uuid": "1d60b458-bb8d-4940-86e9-265a60e867f8"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{apikey}}",
								"uuid": "748020d5-d7a9-469b-ae5a-d19bb4d04886"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    // Assuming providerId 6 does not have channelType 3\n    \"providerId\": 6,\n    \"data\": {\n        \"to\": \"919004812051\",\n        \"type\": \"template\",\n        \"template\": {\n            \"namespace\": \"d8bcb6bd_2ab2_439c_9d9e_947501266c77\",\n            \"name\": \"ir_incident_resolution\",\n            \"language\": {\n                \"policy\": \"deterministic\",\n                \"code\": \"en\"\n            },\n            \"components\": [\n                {\n                    \"type\": \"body\",\n                    \"parameters\": [\n                        {\n                            \"type\": \"text\",\n                            \"text\": \"Bishal Biswas\"\n                        },\n                        {\n                            \"type\": \"text\",\n                            \"text\": \"WNK227\"\n                        },\n                        {\n                            \"type\": \"text\",\n                            \"text\": \"Massive Earthquake\"\n                        },\n                        {\n                            \"type\": \"text\",\n                            \"text\": \"Power Grid\"\n                        },\n                        {\n                            \"type\": \"text\",\n                            \"text\": \"Bishal Mondal\"\n                        },\n                        {\n                            \"type\": \"text\",\n                            \"text\": \"Vikas\"\n                        },\n                        {\n                            \"type\": \"text\",\n                            \"text\": \"Open\"\n                        },\n                        {\n                            \"type\": \"text\",\n                            \"text\": \"10\"\n                        },\n                        {\n                            \"type\": \"text\",\n                            \"text\": \"15755\"\n                        }\n                    ]\n                }\n            ]\n        }\n    }\n}"
						},
						"url": {
							"raw": "localhost:3000/notifications",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"notifications"
							]
						},
						"description": "Allows successfully creating new notification for the 360Dialog WhatsApp channel type."
					},
					"response": []
				},
				{
					"name": "Send 360Dialog WhatsApp Notification - Missing To Field",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response is valid JSON\", function () {",
									"    pm.response.to.be.json;",
									"});",
									"pm.test(\"Response for Invalid Data (Missing 'to' Value)\", function () {",
									"    pm.expect(pm.response.code).to.equal(400);",
									"    pm.expect(pm.response.json().status).to.equal(\"fail\");",
									"    pm.expect(pm.response.json().data[0]).to.equal(\"to should not be empty\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"uuid": "f7b05f3d-8633-4468-af6d-8b82b7be7700"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{apikey}}",
								"uuid": "de5767ba-aeed-43b9-94c4-fbe27c2d4aff"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"providerId\": 3,\n    \"data\": {\n        \"type\": \"template\",\n        \"template\": {\n            \"namespace\": \"d8bcb6bd_2ab2_439c_9d9e_947501266c77\",\n            \"name\": \"ir_incident_resolution\",\n            \"language\": {\n                \"policy\": \"deterministic\",\n                \"code\": \"en\"\n            },\n            \"components\": [\n                {\n                    \"type\": \"body\",\n                    \"parameters\": [\n                        {\n                            \"type\": \"text\",\n                            \"text\": \"Bishal Biswas\"\n                        },\n                        {\n                            \"type\": \"text\",\n                            \"text\": \"WNK227\"\n                        },\n                        {\n                            \"type\": \"text\",\n                            \"text\": \"Massive Earthquake\"\n                        },\n                        {\n                            \"type\": \"text\",\n                            \"text\": \"Power Grid\"\n                        },\n                        {\n                            \"type\": \"text\",\n                            \"text\": \"Bishal Mondal\"\n                        },\n                        {\n                            \"type\": \"text\",\n                            \"text\": \"Vikas\"\n                        },\n                        {\n                            \"type\": \"text\",\n                            \"text\": \"Open\"\n                        },\n                        {\n                            \"type\": \"text\",\n                            \"text\": \"10\"\n                        },\n                        {\n                            \"type\": \"text\",\n                            \"text\": \"15755\"\n                        }\n                    ]\n                }\n            ]\n        }\n    }\n}"
						},
						"url": {
							"raw": "localhost:3000/notifications",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"notifications"
							]
						},
						"description": "Allows representing failure in creating new notification for the 360Dialog WhatsApp channel type when missing the `to` field."
					},
					"response": []
				},
				{
					"name": "Send 360Dialog WhatsApp Notification - Invalid API Key",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response is valid JSON\", function () {",
									"    pm.response.to.be.json;",
									"});",
									"pm.test(\"Failed request with invalid API key\", function () {",
									"    pm.expect(pm.response.code).to.equal(401);",
									"    pm.expect(pm.response.json().status).to.equal(\"fail\");",
									"    pm.expect(pm.response.json().data).to.equal(\"Invalid API key\");",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"uuid": "79e200a9-582f-46d7-ab99-61c0875ab62f"
							},
							{
								"key": "Authorization",
								"value": "bad-api-key",
								"uuid": "9cac08e5-dfbb-41f0-b7b7-ce423f94162f"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"providerId\": 3,\n    \"data\": {\n        \"to\": \"919004812051\",\n        \"type\": \"template\",\n        \"template\": {\n            \"namespace\": \"d8bcb6bd_2ab2_439c_9d9e_947501266c77\",\n            \"name\": \"ir_incident_resolution\",\n            \"language\": {\n                \"policy\": \"deterministic\",\n                \"code\": \"en\"\n            },\n            \"components\": [\n                {\n                    \"type\": \"body\",\n                    \"parameters\": [\n                        {\n                            \"type\": \"text\",\n                            \"text\": \"Bishal Biswas\"\n                        },\n                        {\n                            \"type\": \"text\",\n                            \"text\": \"WNK227\"\n                        },\n                        {\n                            \"type\": \"text\",\n                            \"text\": \"Massive Earthquake\"\n                        },\n                        {\n                            \"type\": \"text\",\n                            \"text\": \"Power Grid\"\n                        },\n                        {\n                            \"type\": \"text\",\n                            \"text\": \"Bishal Mondal\"\n                        },\n                        {\n                            \"type\": \"text\",\n                            \"text\": \"Vikas\"\n                        },\n                        {\n                            \"type\": \"text\",\n                            \"text\": \"Open\"\n                        },\n                        {\n                            \"type\": \"text\",\n                            \"text\": \"10\"\n                        },\n                        {\n                            \"type\": \"text\",\n                            \"text\": \"15755\"\n                        }\n                    ]\n                }\n            ]\n        }\n    }\n}"
						},
						"url": {
							"raw": "localhost:3000/notifications",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"notifications"
							]
						},
						"description": "Allows representing failure in creating new notification for the 360Dialog WhatsApp channel type when passing invalid API key."
					},
					"response": []
				}
			],
			"description": "Collection of requests pertaining to creating notifications for the 360Dialog WhatsApp channel type."
		},
		{
			"name": "Twilio WhatsApp Notifications",
			"item": [
				{
					"name": "Send Twilio WhatsApp Notification - Success",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response is valid JSON\", function () {",
									"    pm.response.to.be.json;",
									"});",
									"pm.test(\"Response has valid 'status' and 'data' properties\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property(\"status\", \"success\");",
									"    pm.expect(jsonData).to.have.property(\"data\").to.be.an(\"object\");",
									"});",
									"pm.test(\"Response contains a valid 'notification' object\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.data).to.have.property(\"notification\").to.be.an(\"object\");",
									"});",
									"pm.test(\"Response 'channelType' is 3\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.data.notification).to.have.property(\"channelType\", 3);",
									"});",
									"pm.test(\"Response 'deliveryStatus' is 1\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.data.notification).to.have.property(\"deliveryStatus\", 1);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"uuid": "11886eec-bdca-4e1e-8fac-2a15d5955f93"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{apikey}}",
								"uuid": "4c4fe8e7-b003-4ddc-abbd-8d2a56ef9830"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    // Assuming providerId 4 also has channelType 4\n    \"providerId\": 4,\n    \"data\": {\n        \"to\": \"+919004812051\",\n        \"message\": \"Your appointment is coming up on July 21 at 3PM\"\n    }\n}"
						},
						"url": {
							"raw": "localhost:3000/notifications",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"notifications"
							]
						},
						"description": "Allows successfully creating new notification for the Twilio WhatsApp channel type."
					},
					"response": []
				},
				{
					"name": "Send Twilio WhatsApp Notification - Mismatch in ChannelType",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response is valid JSON\", function () {",
									"    pm.response.to.be.json;",
									"});",
									"pm.test(\"Response has valid 'status' and 'data' properties\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property(\"status\", \"success\");",
									"    pm.expect(jsonData).to.have.property(\"data\").to.be.an(\"object\");",
									"});",
									"pm.test(\"Response contains a valid 'notification' object\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.data).to.have.property(\"notification\").to.be.an(\"object\");",
									"});",
									"pm.test(\"Response 'channelType' is 3\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.data.notification).to.have.property(\"channelType\", 3);",
									"});",
									"pm.test(\"Response 'deliveryStatus' is 1\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.data.notification).to.have.property(\"deliveryStatus\", 1);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"uuid": "f3691e86-163b-4e14-8387-69756457b4ec"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{apikey}}",
								"uuid": "06d06391-67b2-43fd-9874-a20dd5be84c5"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    // Assuming providerId 6 does not have channelType 4\n    \"providerId\": 6,\n    \"data\": {\n        \"to\": \"+919004812051\",\n        \"message\": \"Your appointment is coming up on July 21 at 3PM\"\n    }\n}"
						},
						"url": {
							"raw": "localhost:3000/notifications",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"notifications"
							]
						},
						"description": "Allows successfully creating new notification for the Twilio WhatsApp channel type."
					},
					"response": []
				},
				{
					"name": "Send Twilio WhatsApp Notification - Missing To Field",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response is valid JSON\", function () {",
									"    pm.response.to.be.json;",
									"});",
									"pm.test(\"Response for Invalid Data (Missing 'to' Value)\", function () {",
									"    pm.expect(pm.response.code).to.equal(400);",
									"    pm.expect(pm.response.json().status).to.equal(\"fail\");",
									"    pm.expect(pm.response.json().data[0]).to.equal(\"to should not be empty\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"uuid": "0aaa342a-9ff3-4f7f-97e5-5d64d429f65f"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{apikey}}",
								"uuid": "644c27a0-ec1e-4d04-86e9-facb4c81b448"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"providerId\": 4,\n    \"data\": {\n        \"message\": \"Your appointment is coming up on July 21 at 3PM\"\n    }\n}"
						},
						"url": {
							"raw": "localhost:3000/notifications",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"notifications"
							]
						},
						"description": "Allows representing failure in creating new notification for the Twilio WhatsApp channel type when missing the `to` field."
					},
					"response": []
				},
				{
					"name": "Send Twilio WhatsApp Notification - Invalid API Key",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response is valid JSON\", function () {",
									"    pm.response.to.be.json;",
									"});",
									"pm.test(\"Failed request with invalid API key\", function () {",
									"    pm.expect(pm.response.code).to.equal(401);",
									"    pm.expect(pm.response.json().status).to.equal(\"fail\");",
									"    pm.expect(pm.response.json().data).to.equal(\"Invalid API key\");",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"uuid": "7b3d8ac7-f687-4a70-8b66-7d133f1297cb"
							},
							{
								"key": "Authorization",
								"value": "bad-api-key",
								"uuid": "359fecb5-5e5a-45b3-8366-86866d450575"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"providerId\": 4,\n    \"data\": {\n        \"to\": \"+919004812051\",\n        \"message\": \"Your appointment is coming up on July 21 at 3PM\"\n    }\n}"
						},
						"url": {
							"raw": "localhost:3000/notifications",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"notifications"
							]
						},
						"description": "Allows representing failure in creating new notification for the Twilio WhatsApp channel type when passing invalid API key."
					},
					"response": []
				}
			],
			"description": "Collection of requests pertaining to creating notifications for the Twilio WhatsApp channel type."
		},
		{
			"name": "Twilio WhatsApp (Business) Notifications",
			"item": [
				{
					"name": "Send Twilio WhatsApp (Business) Notification - Success",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response is valid JSON\", function () {",
									"    pm.response.to.be.json;",
									"});",
									"pm.test(\"Response has valid 'status' and 'data' properties\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property(\"status\", \"success\");",
									"    pm.expect(jsonData).to.have.property(\"data\").to.be.an(\"object\");",
									"});",
									"pm.test(\"Response contains a valid 'notification' object\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.data).to.have.property(\"notification\").to.be.an(\"object\");",
									"});",
									"pm.test(\"Response 'channelType' is 7\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.data.notification).to.have.property(\"channelType\", 7);",
									"});",
									"pm.test(\"Response 'deliveryStatus' is 1\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.data.notification).to.have.property(\"deliveryStatus\", 1);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"uuid": "ca46f026-7f6e-457d-b904-9dda12e0c87e"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{apikey}}",
								"uuid": "72122add-026c-4702-99fa-67b5e484343d"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  // Set your respective providerId\n  \"providerId\": 7,\n  \"data\": {\n    \"contentSid\": \"HXxxxxxxxxxxxxxxxxxxxx\",\n    \"from\": \"MGxxxxxxxxxxxxxxxxxxx\",\n    \"contentVariables\": {\n      \"1\": \"Name\",\n      \"2\": \"2\",\n      \"3\": \"29-04-2024\",\n      \"4\": \"03-05-2024\",\n      \"5\": \"Sunday, 05-05-2024\"\n    },\n    \"to\": \"+91xxxxxxxxxxx\"\n  }\n}"
						},
						"url": {
							"raw": "localhost:3000/notifications",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"notifications"
							]
						},
						"description": "Allows successfully creating new notification for the Twilio WhatsApp channel type."
					},
					"response": []
				},
				{
					"name": "Send Twilio WhatsApp (Business) Notification - Invalid Provider ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"uuid": "3a50d6a2-7a0b-416d-a136-602a808c95ed"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{apikey}}",
								"uuid": "c18842b2-3c7b-4893-bf2d-1c830fbc255a"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  // Set your respective providerId\n  \"providerId\": 77,\n  \"data\": {\n    \"contentSid\": \"HXxxxxxxxxxxxxxxxxxxxx\",\n    \"from\": \"MGxxxxxxxxxxxxxxxxxxx\",\n    \"contentVariables\": {\n      \"1\": \"Name\",\n      \"2\": \"2\",\n      \"3\": \"29-04-2024\",\n      \"4\": \"03-05-2024\",\n      \"5\": \"Sunday, 05-05-2024\"\n    },\n    \"to\": \"+91xxxxxxxxxxx\"\n  }\n}"
						},
						"url": {
							"raw": "localhost:3000/notifications",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"notifications"
							]
						},
						"description": "Allows successfully creating new notification for the Twilio WhatsApp channel type."
					},
					"response": []
				},
				{
					"name": "Send Twilio WhatsApp (Business) Notification - Missing To Field",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response is valid JSON\", function () {",
									"    pm.response.to.be.json;",
									"});",
									"pm.test(\"Response for Invalid Data (Missing 'to' Value)\", function () {",
									"    pm.expect(pm.response.code).to.equal(400);",
									"    pm.expect(pm.response.json().status).to.equal(\"fail\");",
									"    pm.expect(pm.response.json().data[0]).to.equal(\"to should not be empty\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"uuid": "e2b1c384-078e-4d1a-9bfa-2509b0ac1581"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{apikey}}",
								"uuid": "bf997e97-2650-43f0-9c78-14b147919a66"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  // Set your respective providerId\n  \"providerId\": 7,\n  \"data\": {\n    \"contentSid\": \"HXxxxxxxxxxxxxxxxxxxxx\",\n    \"from\": \"MGxxxxxxxxxxxxxxxxxxx\",\n    \"contentVariables\": {\n      \"1\": \"Name\",\n      \"2\": \"2\",\n      \"3\": \"29-04-2024\",\n      \"4\": \"03-05-2024\",\n      \"5\": \"Sunday, 05-05-2024\"\n    }\n  }\n}"
						},
						"url": {
							"raw": "localhost:3000/notifications",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"notifications"
							]
						},
						"description": "Allows representing failure in creating new notification for the Twilio WhatsApp channel type when missing the `to` field."
					},
					"response": []
				},
				{
					"name": "Send Twilio WhatsApp (Business) Notification - Invalid API Key",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"uuid": "8ce1188b-d140-46de-92a1-9b12f68b10ce"
							},
							{
								"key": "Authorization",
								"value": "Bearer bad-api-key",
								"uuid": "46705832-b785-4aa3-b161-6600dbc17990"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  // Set your respective providerId\n  \"providerId\": 7,\n  \"data\": {\n    \"contentSid\": \"HXxxxxxxxxxxxxxxxxxxxx\",\n    \"from\": \"MGxxxxxxxxxxxxxxxxxxx\",\n    \"contentVariables\": {\n      \"1\": \"Name\",\n      \"2\": \"2\",\n      \"3\": \"29-04-2024\",\n      \"4\": \"03-05-2024\",\n      \"5\": \"Sunday, 05-05-2024\"\n    },\n    \"to\": \"+91xxxxxxxxxxx\"\n  }\n}"
						},
						"url": {
							"raw": "localhost:3000/notifications",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"notifications"
							]
						},
						"description": "Allows representing failure in creating new notification for the Twilio WhatsApp channel type when passing invalid API key."
					},
					"response": []
				}
			],
			"description": "Collection of requests pertaining to creating notifications for the Twilio WhatsApp channel type using templates."
		},
		{
			"name": "Twilio SMS Notifications",
			"item": [
				{
					"name": "Send Twilio SMS Notification - Success",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response is valid JSON\", function () {",
									"  pm.response.to.be.json;",
									"});",
									"pm.test(\"Response has valid 'status' and 'data' properties\", function () {",
									"  var jsonData = pm.response.json();",
									"  pm.expect(jsonData).to.have.property(\"status\", \"success\");",
									"  pm.expect(jsonData).to.have.property(\"data\").to.be.an(\"object\");",
									"});",
									"pm.test(\"Response contains a valid 'notification' object\", function () {",
									"  var jsonData = pm.response.json();",
									"  pm.expect(jsonData.data).to.have.property(\"notification\").to.be.an(\"object\");",
									"});",
									"pm.test(\"Response 'channelType' is 5\", function () {",
									"  var jsonData = pm.response.json();",
									"  pm.expect(jsonData.data.notification).to.have.property(\"channelType\", 5);",
									"});",
									"pm.test(\"Response 'deliveryStatus' is 1\", function () {",
									"  var jsonData = pm.response.json();",
									"  pm.expect(jsonData.data.notification).to.have.property(\"deliveryStatus\", 1);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"uuid": "ea15d594-a6a5-4b88-bb5c-b949bfca3dbf"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{apikey}}",
								"uuid": "9525bbec-bee3-4575-bb60-449026082740"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    // Assuming providerId 5 also has channelType 5\n    \"providerId\": 5,\n    \"data\": {\n        \"to\": \"+15005550006\",\n        \"message\": \"Your appointment is coming up on March 21 at 2PM\"\n    }\n}"
						},
						"url": {
							"raw": "localhost:3000/notifications",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"notifications"
							]
						},
						"description": "Allows successfully creating new notification for the Twilio SMS channel type."
					},
					"response": []
				},
				{
					"name": "Send Twilio SMS Notification - Mismatch in ChannelType",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response is valid JSON\", function () {",
									"  pm.response.to.be.json;",
									"});",
									"pm.test(\"Response has valid 'status' and 'data' properties\", function () {",
									"  var jsonData = pm.response.json();",
									"  pm.expect(jsonData).to.have.property(\"status\", \"success\");",
									"  pm.expect(jsonData).to.have.property(\"data\").to.be.an(\"object\");",
									"});",
									"pm.test(\"Response contains a valid 'notification' object\", function () {",
									"  var jsonData = pm.response.json();",
									"  pm.expect(jsonData.data).to.have.property(\"notification\").to.be.an(\"object\");",
									"});",
									"pm.test(\"Response 'channelType' is 5\", function () {",
									"  var jsonData = pm.response.json();",
									"  pm.expect(jsonData.data.notification).to.have.property(\"channelType\", 5);",
									"});",
									"pm.test(\"Response 'deliveryStatus' is 1\", function () {",
									"  var jsonData = pm.response.json();",
									"  pm.expect(jsonData.data.notification).to.have.property(\"deliveryStatus\", 1);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"uuid": "a8840fec-b490-498d-a25f-34c5fbe8909b"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{apikey}}",
								"uuid": "4a9723b0-3f61-4434-b9b6-4fff6fc76116"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    // Assuming providerId 6 does not have channelType 5\n    \"providerId\": 6,\n    \"data\": {\n        \"to\": \"+15005550006\",\n        \"message\": \"Your appointment is coming up on March 21 at 2PM\"\n    }\n}"
						},
						"url": {
							"raw": "localhost:3000/notifications",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"notifications"
							]
						},
						"description": "Allows successfully creating new notification for the Twilio SMS channel type."
					},
					"response": []
				},
				{
					"name": "Send Twilio SMS Notification - Missing To Field",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response is valid JSON\", function () {",
									"  pm.response.to.be.json;",
									"});",
									"pm.test(\"Response for Invalid Data (Missing 'to' Value)\", function () {",
									"  pm.expect(pm.response.code).to.equal(400);",
									"  pm.expect(pm.response.json().status).to.equal(\"fail\");",
									"  pm.expect(pm.response.json().data[0]).to.equal(\"to should not be empty\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"uuid": "62a589a8-b3be-46b6-afa6-5482ff27e0d4"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{apikey}}",
								"uuid": "2147ac32-41b0-471d-88cd-e8a98dce3667"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"providerId\": 5,\n    \"data\": {\n        \"message\": \"Your appointment is coming up on March 21 at 2PM\"\n    }\n}"
						},
						"url": {
							"raw": "localhost:3000/notifications",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"notifications"
							]
						},
						"description": "Allows representing failure in creating new notification for the Twilio SMS channel type when missing the `to` field."
					},
					"response": []
				},
				{
					"name": "Send Twilio SMS Notification - Invalid API Key",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response is valid JSON\", function () {",
									"  pm.response.to.be.json;",
									"});",
									"pm.test(\"Failed request with invalid API key\", function () {",
									"  pm.expect(pm.response.code).to.equal(401);",
									"  pm.expect(pm.response.json().status).to.equal(\"fail\");",
									"  pm.expect(pm.response.json().data).to.equal(\"Invalid API key\");",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"uuid": "faf4c499-f716-4e15-89c3-d72431e6e688"
							},
							{
								"key": "Authorization",
								"value": "bad-api-key",
								"uuid": "cb6b3e54-c6f0-4d49-b5e8-7eb07977c76d"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"providerId\": 5,\n    \"data\": {\n        \"to\": \"+15005550006\",\n        \"message\": \"Your appointment is coming up on March 21 at 2PM\"\n    }\n}"
						},
						"url": {
							"raw": "localhost:3000/notifications",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"notifications"
							]
						},
						"description": "Allows representing failure in creating new notification for the Twilio SMS channel type when passing invalid API key."
					},
					"response": []
				}
			],
			"description": "Collection of requests pertaining to creating notifications for the Twilio SMS channel type."
		},
		{
			"name": "Plivo SMS Notifications",
			"item": [
				{
					"name": "Send Plivo SMS Notification - Success",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response is valid JSON\", function () {",
									"  pm.response.to.be.json;",
									"});",
									"pm.test(\"Response has valid 'status' and 'data' properties\", function () {",
									"  var jsonData = pm.response.json();",
									"  pm.expect(jsonData).to.have.property(\"status\", \"success\");",
									"  pm.expect(jsonData).to.have.property(\"data\").to.be.an(\"object\");",
									"});",
									"pm.test(\"Response contains a valid 'notification' object\", function () {",
									"  var jsonData = pm.response.json();",
									"  pm.expect(jsonData.data).to.have.property(\"notification\").to.be.an(\"object\");",
									"});",
									"pm.test(\"Response 'channelType' is 5\", function () {",
									"  var jsonData = pm.response.json();",
									"  pm.expect(jsonData.data.notification).to.have.property(\"channelType\", 5);",
									"});",
									"pm.test(\"Response 'deliveryStatus' is 1\", function () {",
									"  var jsonData = pm.response.json();",
									"  pm.expect(jsonData.data.notification).to.have.property(\"deliveryStatus\", 1);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"uuid": "d774a94c-f3d1-47fa-93b4-fa78a81ad628"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{apikey}}",
								"uuid": "2a769c05-c0c1-4fa5-b782-5fd531d00f6b"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    // Assuming providerId 6 also has channelType 6\n    \"providerId\": 6,\n    \"data\": {\n        \"to\": \"+918900100002\",\n        \"message\": \"This is a test message from OsmoX\"\n    }\n}"
						},
						"url": {
							"raw": "localhost:3000/notifications",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"notifications"
							]
						},
						"description": "Allows successfully creating new notification for the Twilio SMS channel type."
					},
					"response": []
				},
				{
					"name": "Send Plivo SMS Notification - Mismatch in ChannelType",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response is valid JSON\", function () {",
									"  pm.response.to.be.json;",
									"});",
									"pm.test(\"Response has valid 'status' and 'data' properties\", function () {",
									"  var jsonData = pm.response.json();",
									"  pm.expect(jsonData).to.have.property(\"status\", \"success\");",
									"  pm.expect(jsonData).to.have.property(\"data\").to.be.an(\"object\");",
									"});",
									"pm.test(\"Response contains a valid 'notification' object\", function () {",
									"  var jsonData = pm.response.json();",
									"  pm.expect(jsonData.data).to.have.property(\"notification\").to.be.an(\"object\");",
									"});",
									"pm.test(\"Response 'channelType' is 5\", function () {",
									"  var jsonData = pm.response.json();",
									"  pm.expect(jsonData.data.notification).to.have.property(\"channelType\", 5);",
									"});",
									"pm.test(\"Response 'deliveryStatus' is 1\", function () {",
									"  var jsonData = pm.response.json();",
									"  pm.expect(jsonData.data.notification).to.have.property(\"deliveryStatus\", 1);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"uuid": "deb135d0-e3dd-4985-9d02-03742650e9cd"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{apikey}}",
								"uuid": "8cded3e6-a096-42aa-8d58-ddee6c9dee6a"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    // Assuming providerId 1 does not have channelType 6\n    \"providerId\": 1,\n    \"data\": {\n        \"to\": \"+918900100002\",\n        \"message\": \"This is a test message from OsmoX\"\n    }\n}"
						},
						"url": {
							"raw": "localhost:3000/notifications",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"notifications"
							]
						},
						"description": "Allows successfully creating new notification for the Twilio SMS channel type."
					},
					"response": []
				},
				{
					"name": "Send Plivo SMS Notification - Missing To Field",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response is valid JSON\", function () {",
									"  pm.response.to.be.json;",
									"});",
									"pm.test(\"Response for Invalid Data (Missing 'to' Value)\", function () {",
									"  pm.expect(pm.response.code).to.equal(400);",
									"  pm.expect(pm.response.json().status).to.equal(\"fail\");",
									"  pm.expect(pm.response.json().data[0]).to.equal(\"to should not be empty\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"uuid": "aa3e6082-5b98-4714-b0b3-feb48923a91a"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{apikey}}",
								"uuid": "644ee7a5-e904-4385-874e-ffef457fd586"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"providerId\": 6,\n    \"data\": {\n        \"message\": \"This is a test message from OsmoX\"\n    }\n}"
						},
						"url": {
							"raw": "localhost:3000/notifications",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"notifications"
							]
						},
						"description": "Allows representing failure in creating new notification for the Twilio SMS channel type when missing the `to` field."
					},
					"response": []
				},
				{
					"name": "Send Plivo SMS Notification - Invalid API Key",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response is valid JSON\", function () {",
									"  pm.response.to.be.json;",
									"});",
									"pm.test(\"Failed request with invalid API key\", function () {",
									"  pm.expect(pm.response.code).to.equal(401);",
									"  pm.expect(pm.response.json().status).to.equal(\"fail\");",
									"  pm.expect(pm.response.json().data).to.equal(\"Invalid API key\");",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"uuid": "5ee0b9c0-eb59-4e95-a44c-d8d5cecf156f"
							},
							{
								"key": "Authorization",
								"value": "bad-api-key",
								"uuid": "e0d5c72c-1dbd-491e-be9b-9145de829156"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"providerId\": 6,\n    \"data\": {\n        \"to\": \"+918900100002\",\n        \"message\": \"This is a test message from OsmoX\"\n    }\n}"
						},
						"url": {
							"raw": "localhost:3000/notifications",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"notifications"
							]
						},
						"description": "Allows representing failure in creating new notification for the Twilio SMS channel type when passing invalid API key."
					},
					"response": []
				}
			],
			"description": "Collection of requests pertaining to creating notifications for the Plivo SMS channel type."
		},
		{
			"name": "Authentication",
			"item": [
				{
					"name": "Login - Success",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response is valid JSON\", function () {",
									"    pm.response.to.be.json;",
									"});",
									"pm.test(\"Response has valid 'data' property\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property(\"data\").to.be.an(\"object\");",
									"});",
									"pm.test(\"Response contains a valid 'login' object\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.data).to.have.property(\"login\").to.be.an(\"object\");",
									"});",
									"pm.test(\"Response contains valid 'token' and 'user' values\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.data.login).to.have.property(\"token\").to.be.a(\"string\");",
									"    pm.expect(jsonData.data.login).to.have.property(\"user\").to.be.a(\"string\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"uuid": "53104364-acc4-4270-a684-9e34f7b75ba0"
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation LoginUser($username: String!, $password: String!) {\n  login(loginUserInput: {username: $username, password: $password}) {\n    token\n    user\n    allKeys {\n       apiKeyId\n       apiKey\n       applicationId\n       status\n    }\n    __typename\n  }\n}",
								"operationName": "LoginUser",
								"variables": "{\n  \"username\": \"{{adminUsername}}\",\n  \"password\": \"{{adminPassword}}\"\n}"
							}
						},
						"url": {
							"raw": "http://localhost:3000/graphql",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"graphql"
							]
						},
						"description": "Allows successfully logging in and obtaining the auth token from API."
					},
					"response": []
				},
				{
					"name": "Login - Invalid credentials",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response is valid JSON\", function () {",
									"    pm.response.to.be.json;",
									"});",
									"pm.test(\"Response for failed login with invalid credentials\", function () {",
									"    pm.expect(pm.response.code).to.equal(200);",
									"    pm.expect(pm.response.json().data).to.equal(null);",
									"    pm.expect(pm.response.json().errors).to.be.an(\"array\");",
									"    pm.expect(pm.response.json().errors[0].message).to.equal(\"Invalid username or password\");",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"uuid": "4a060333-9383-40a4-9c82-e01f82178b92"
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation LoginUser($username: String!, $password: String!) {\n  login(loginUserInput: {username: $username, password: $password}) {\n    token\n    user\n    allKeys {\n       apiKeyId\n       apiKey\n       applicationId\n       status\n    }\n    __typename\n  }\n}",
								"operationName": "LoginUser",
								"variables": "{\n  \"username\": \"{{adminUsername}}\",\n  \"password\": \"abc{{adminPassword}}\"\n}"
							}
						},
						"url": {
							"raw": "http://localhost:3000/graphql",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"graphql"
							]
						},
						"description": "Allows representing failure while logging in when passing invalid credentials."
					},
					"response": []
				},
				{
					"name": "Login - Missing password",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response is valid JSON\", function () {",
									"    pm.response.to.be.json;",
									"});",
									"pm.test(\"Response for failed login with missing password\", function () {",
									"    pm.expect(pm.response.code).to.equal(400);",
									"    pm.expect(pm.response.json().errors).to.be.an(\"array\");",
									"    pm.expect(pm.response.json().errors[0].message).to.equal(\"Field \\\"LoginUserInput.password\\\" of required type \\\"String!\\\" was not provided.\");",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"uuid": "c3fc5c95-a328-4880-9995-21e9b22e7cd0"
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation LoginUser($username: String!) {\n  login(loginUserInput: {username: $username}) {\n    token\n    user\n    allKeys {\n       apiKeyId\n       apiKey\n       applicationId\n       status\n    }\n    __typename\n  }\n}",
								"operationName": "LoginUser",
								"variables": "{\n  \"username\": \"{{adminUsername}}\"\n}"
							}
						},
						"url": {
							"raw": "http://localhost:3000/graphql",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"graphql"
							]
						},
						"description": "Allows representing failure while logging in when missing `password` value."
					},
					"response": []
				},
				{
					"name": "Login - Bad request",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response is valid JSON\", function () {",
									"    pm.response.to.be.json;",
									"});",
									"pm.test(\"Response for failed login with bad request\", function () {",
									"    pm.expect(pm.response.code).to.equal(400);",
									"    pm.expect(pm.response.json().errors).to.be.an(\"array\");",
									"    pm.expect(pm.response.json().errors[0].message).to.be.a(\"string\");",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"uuid": "f2879ae4-245f-4b37-a155-de38051afa8c"
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation LoginUser($username: String!, $password: String!) {\n  login(loginUserInput: {username: $username, password: $password}) {\n    token\n    users\n    allKeys {\n       apiKeyId\n       apiKey\n       applicationId\n       status\n    }\n    __typename\n  }\n}",
								"operationName": "LoginUser",
								"variables": "{\n  \"username\": \"{{adminUsername}}\",\n  \"password\": \"{{adminPassword}}\"\n}"
							}
						},
						"url": {
							"raw": "http://localhost:3000/graphql",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"graphql"
							]
						},
						"description": "Allows representing failure while logging in when using invalid/bad request."
					},
					"response": []
				}
			],
			"description": "Collection of requests pertaining to authentication related requests such as login."
		},
		{
			"name": "All Notifications",
			"item": [
				{
					"name": "Fetch All Notifications - Success",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response is valid JSON\", function () {",
									"    pm.response.to.be.json;",
									"});",
									"pm.test(\"Response has valid 'data' property\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property(\"data\").to.be.an(\"object\");",
									"});",
									"pm.test(\"Response contains a valid 'notifications' object\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.data).to.have.property(\"notifications\").to.be.an(\"object\");",
									"});",
									"pm.test(\"Response contains a valid 'notifications' array\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.data.notifications).to.have.property(\"notifications\").to.be.an(\"array\");",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{apikey}}",
								"uuid": "2020842f-be12-4546-862a-bbc799e1d34c"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"uuid": "792e6175-b167-4985-929f-7b3bf0932cfe"
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query {\r\n  notifications(\r\n    options: {\r\n      limit: 5\r\n      offset: 0\r\n      sortBy: \"createdOn\"\r\n      sortOrder: DESC\r\n      search: \"sender@email.com\"\r\n      filters: [{ field: \"channelType\", operator: \"eq\", value: \"1\" }]\r\n    }\r\n  ) {\r\n    notifications {\r\n      applicationDetails {\r\n        applicationId\r\n        name\r\n        userId\r\n        status\r\n        createdOn\r\n        updatedOn\r\n      }\r\n      applicationId\r\n      channelType\r\n      createdBy\r\n      createdOn\r\n      data\r\n      deliveryStatus\r\n      id\r\n      providerId\r\n      result\r\n      status\r\n      updatedBy\r\n      updatedOn\r\n    }\r\n    total,\r\n    offset,\r\n    limit\r\n  }\r\n}",
								"variables": ""
							}
						},
						"url": {
							"raw": "http://localhost:3000/graphql",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"graphql"
							]
						},
						"description": "Allows successfully fetching all notifications based on the options passed."
					},
					"response": []
				},
				{
					"name": "Fetch All Notifications - Bad request",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response is valid JSON\", function () {",
									"    pm.response.to.be.json;",
									"});",
									"pm.test(\"Response for fetching notifications with bad request\", function () {",
									"    pm.expect(pm.response.code).to.equal(400);",
									"    pm.expect(pm.response.json().errors).to.be.an(\"array\");",
									"    pm.expect(pm.response.json().errors[0].message).to.be.a(\"string\");",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{apikey}}",
								"uuid": "bd59054d-4560-41fc-8dc6-d5f244b6a7f6"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"uuid": "8cc7080c-cee5-4881-8502-c7453bb2a9af"
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query {\r\n  notifications(\r\n    options: {\r\n      unknownValue: \"Some unknown parameter\"\r\n      limit: 5\r\n      offset: 0\r\n      sortBy: \"createdOn\"\r\n      sortOrder: DESC\r\n      search: \"sender@email.com\"\r\n      filters: [{ field: \"channelType\", operator: \"eq\", value: \"1\" }]\r\n    }\r\n  ) {\r\n    notifications {\r\n      applicationDetails {\r\n        applicationId\r\n        name\r\n        userId\r\n        status\r\n        createdOn\r\n        updatedOn\r\n      }\r\n      applicationId\r\n      channelType\r\n      createdBy\r\n      createdOn\r\n      data\r\n      deliveryStatus\r\n      id\r\n      providerId\r\n      result\r\n      status\r\n      updatedBy\r\n      updatedOn\r\n    }\r\n    total,\r\n    offset,\r\n    limit\r\n  }\r\n}",
								"variables": ""
							}
						},
						"url": {
							"raw": "http://localhost:3000/graphql",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"graphql"
							]
						},
						"description": "Allows representing failure when fetching all notifications when using invalid/bad request."
					},
					"response": []
				}
			],
			"description": "Collection of requests pertaining to fetching all notifications."
		},
		{
			"name": "Notification by Id",
			"item": [
				{
					"name": "Fetch Notification by ID - Success",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "FoundationX-test-key",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:3000/notifications/1",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"notifications",
								"1"
							]
						}
					},
					"response": []
				}
			],
			"description": "Collection of requests pertaining to fetching single notification by Id"
		},
		{
			"name": "All Applications",
			"item": [
				{
					"name": "Fetch all Applications - Success",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "mysecretadminkey",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query {\r\n  applications(\r\n    options: {\r\n      limit: 5\r\n      offset: 0\r\n      sortBy: \"createdOn\"\r\n      sortOrder: ASC\r\n      search: \"key\"\r\n      filters: [{ field: \"applicationId\", operator: \"eq\", value: \"1\" }]\r\n    }\r\n  ) {\r\n    applications {\r\n        applicationId\r\n        name\r\n        userId\r\n        createdOn\r\n        updatedOn\r\n        status\r\n    }\r\n    total,\r\n    offset,\r\n    limit\r\n  }\r\n}",
								"variables": ""
							}
						},
						"url": {
							"raw": "http://localhost:3000/graphql",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Fetch all Applications - Bad Request",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "mysecretadminkey",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query {\r\n  applications(\r\n    options: {\r\n      unknownValue: \"Some unknown parameter\"\r\n      limit: 5\r\n      offset: 0\r\n      sortBy: \"createdOn\"\r\n      sortOrder: ASC\r\n      search: \"key\"\r\n      filters: [{ field: \"applicationId\", operator: \"eq\", value: \"1\" }]\r\n    }\r\n  ) {\r\n    applications {\r\n        applicationId\r\n        name\r\n        userId\r\n        createdOn\r\n        updatedOn\r\n        status\r\n    }\r\n    total,\r\n    offset,\r\n    limit\r\n  }\r\n}",
								"variables": ""
							}
						},
						"url": {
							"raw": "http://localhost:3000/graphql",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				}
			],
			"description": "Collection of requests pertaining to fetching all applications."
		},
		{
			"name": "New Application",
			"item": [
				{
					"name": "Create new Application - Success",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "mysecretadminkey",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation CreateApplication {\r\n    application(createApplicationInput: {\r\n        name: \"sampleFoundationXApp\",\r\n        userId: 2,\r\n    }) {\r\n        applicationId\r\n        name\r\n        userId\r\n        createdOn\r\n        updatedOn\r\n        status\r\n    }\r\n}",
								"variables": ""
							}
						},
						"url": {
							"raw": "http://localhost:3000/graphql",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create new Application - Bad Request",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "mysecretadminkey",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation CreateApplication {\r\n    application(createApplicationInput: {\r\n        unknownValue: \"Some unknown parameter\"\r\n        name: \"sampleFoundationXApp\",\r\n        userId: 2,\r\n    }) {\r\n        applicationId\r\n        name\r\n        userId\r\n        createdOn\r\n        updatedOn\r\n        status\r\n    }\r\n}",
								"variables": ""
							}
						},
						"url": {
							"raw": "http://localhost:3000/graphql",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				}
			],
			"description": "Collection of requests pertaining to creating new application."
		},
		{
			"name": "All Providers",
			"item": [
				{
					"name": "Fetch all Providers - Success",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "OsmoX-test-key",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query {\r\n  providers(\r\n    options: {\r\n      limit: 5\r\n      offset: 0\r\n      sortBy: \"createdOn\"\r\n      sortOrder: ASC\r\n    }\r\n  ) {\r\n    providers {\r\n        providerId\r\n        name\r\n        channelType\r\n        configuration\r\n        isEnabled\r\n        userId\r\n        createdOn\r\n        updatedOn\r\n        status\r\n    }\r\n    total,\r\n    offset,\r\n    limit\r\n  }\r\n}",
								"variables": ""
							}
						},
						"url": {
							"raw": "http://localhost:3000/graphql",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Fetch all Providers - Bad Request",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "mysecretadminkey",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query {\r\n  providers(\r\n    options: {\r\n      limit: 5\r\n      offset: 0\r\n      sortBy: \"createdOn\"\r\n      unknownValue: \"Some unknown parameter\"\r\n      sortOrder: ASC\r\n    }\r\n  ) {\r\n    providers {\r\n        providerId\r\n        name\r\n        channelType\r\n        configuration\r\n        isEnabled\r\n        userId\r\n        createdOn\r\n        updatedOn\r\n        status\r\n    }\r\n    total,\r\n    offset,\r\n    limit\r\n  }\r\n}",
								"variables": ""
							}
						},
						"url": {
							"raw": "http://localhost:3000/graphql",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				}
			],
			"description": "Collection of requests pertaining to fetching all applications."
		},
		{
			"name": "New Provider",
			"item": [
				{
					"name": "Create new Provider - Success",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "OsmoX-test-key",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation CreateProvider {\n    provider(createProviderInput: {\n        applicationId: 5,\n        channelType: 2,\n        configuration: {},\n        isEnabled: 1,\n        name: \"Mailgun PineStem\",\n        userId: 1,\n    }) {\n        applicationId\n        channelType\n        configuration\n        isEnabled\n        name\n        userId\n        createdOn\n        updatedOn\n        status\n    }\n}",
								"variables": ""
							}
						},
						"url": {
							"raw": "http://localhost:3000/graphql",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create new Provider - Bad Request",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "OsmoX-test-key",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation CreateProvider {\n    provider(createProviderInput: {\n        applicationId: 5,\n        unknownValue: \"Some unknown parameter\",\n        channelType: 2,\n        configuration: {},\n        isEnabled: 1,\n        name: \"Mailgun PineStem\",\n        userId: 1,\n    }) {\n        applicationId\n        channelType\n        configuration\n        isEnabled\n        name\n        userId\n        createdOn\n        updatedOn\n        status\n    }\n}",
								"variables": ""
							}
						},
						"url": {
							"raw": "http://localhost:3000/graphql",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				}
			]
		}
	]
}