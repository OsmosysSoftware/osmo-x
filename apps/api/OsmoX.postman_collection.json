{
	"info": {
		"_postman_id": "336711a4-7ddf-4f32-b136-4aa09b0e284b",
		"name": "OsmoX",
		"description": "OsmoX API helps creating new notifications, fetching existing notifications as well as perform authorization related tasks.",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "27217372"
	},
	"item": [
		{
			"name": "SMTP Notifications",
			"item": [
				{
					"name": "Send SMTP Notification - Success",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response is valid JSON\", function () {",
									"    pm.response.to.be.json;",
									"});",
									"pm.test(\"Response has valid 'status' and 'data' properties\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property(\"status\", \"success\");",
									"    pm.expect(jsonData).to.have.property(\"data\").to.be.an(\"object\");",
									"});",
									"pm.test(\"Response contains a valid 'notification' object\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.data).to.have.property(\"notification\").to.be.an(\"object\");",
									"});",
									"pm.test(\"Response 'channelType' is 1\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.data.notification).to.have.property(\"channelType\", 1);",
									"});",
									"pm.test(\"Response 'deliveryStatus' is 1\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.data.notification).to.have.property(\"deliveryStatus\", 1);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "x-api-key",
								"value": "{{x-api-key}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    // Assuming providerId 1 also has channelType 1\n    \"providerId\": 1,\n    \"data\": {\n        \"from\": \"jacuzisplot@gmail.com\",\n        \"to\": \"vikas.k@osmosys.co\",\n        \"subject\": \"Test subject\",\n        \"text\": \"This is a test notification\",\n        \"html\": \"<b>This is a test notification</b>\"\n    }\n}"
						},
						"url": {
							"raw": "localhost:3000/notifications",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"notifications"
							]
						},
						"description": "Allows successfully creating new notification for the SMTP channel type."
					},
					"response": []
				},
				{
					"name": "Send SMTP Notification - Mismatch in ChannelType",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response is valid JSON\", function () {",
									"    pm.response.to.be.json;",
									"});",
									"pm.test(\"Response code is 400 Bad Request\", function () {",
									"    pm.expect(pm.response.code).to.equal(400);",
									"});",
									"pm.test(\"Response has valid 'status' and 'data' properties\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property(\"status\", \"fail\");",
									"    pm.expect(jsonData).to.have.property(\"data\");",
									"});",
									"pm.test(\"Response does not contain a valid 'notification' object\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.data).to.not.have.property(\"notification\").to.be.an(\"object\");",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "x-api-key",
								"value": "{{x-api-key}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    // Assuming providerId 111 does not have channelType 1\n    \"providerId\": 111,\n    \"data\": {\n        \"from\": \"jacuzisplot@gmail.com\",\n        \"to\": \"vikas.k@osmosys.co\",\n        \"subject\": \"Test subject\",\n        \"text\": \"This is a test notification\",\n        \"html\": \"<b>This is a test notification</b>\"\n    }\n}"
						},
						"url": {
							"raw": "localhost:3000/notifications",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"notifications"
							]
						},
						"description": "Allows successfully creating new notification for the SMTP channel type."
					},
					"response": []
				},
				{
					"name": "Send SMTP Notification - Missing To Field",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response is valid JSON\", function () {",
									"    pm.response.to.be.json;",
									"});",
									"pm.test(\"Response for Invalid Data (Missing 'to' Value)\", function () {",
									"    pm.expect(pm.response.code).to.equal(400);",
									"    pm.expect(pm.response.json().status).to.equal(\"fail\");",
									"    pm.expect(pm.response.json().data[0]).to.equal(\"to should not be empty\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "x-api-key",
								"value": "{{x-api-key}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"providerId\": 1,\n    \"data\": {\n        \"from\": \"vikaskyatannawar@gmail.com\",\n        \"subject\": \"Test subject\",\n        \"text\": \"This is a test notification\",\n        \"html\": \"<b>This is a test notification</b>\"\n    }\n}"
						},
						"url": {
							"raw": "localhost:3000/notifications",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"notifications"
							]
						},
						"description": "Allows representing failure in creating new notification for the SMTP channel type when missing the `to` field."
					},
					"response": []
				},
				{
					"name": "Send SMTP Notification - Invalid API Key",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response is valid JSON\", function () {",
									"    pm.response.to.be.json;",
									"});",
									"pm.test(\"Failed request with invalid x-api-key\", function () {",
									"    pm.expect(pm.response.code).to.equal(401);",
									"    pm.expect(pm.response.json().status).to.equal(\"fail\");",
									"    pm.expect(pm.response.json().data).to.equal(\"Invalid x-api-key\");",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "x-api-key",
								"value": "bad-api-key",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"providerId\": 1,\n    \"data\": {\n        \"from\": \"vikaskyatannawar@gmail.com\",\n        \"to\": \"vikas.k@osmosys.co\",\n        \"subject\": \"Test subject\",\n        \"text\": \"This is a test notification\",\n        \"html\": \"<b>This is a test notification</b>\"\n    }\n}"
						},
						"url": {
							"raw": "localhost:3000/notifications",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"notifications"
							]
						},
						"description": "Allows representing failure in creating new notification for the SMTP channel type when passing invalid API key."
					},
					"response": []
				}
			],
			"description": "Collection of requests pertaining to creating notifications for the SMTP channel type."
		},
		{
			"name": "Mailgun Notifications",
			"item": [
				{
					"name": "Send Mailgun Notification - Success",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response is valid JSON\", function () {",
									"    pm.response.to.be.json;",
									"});",
									"pm.test(\"Response has valid 'status' and 'data' properties\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property(\"status\", \"success\");",
									"    pm.expect(jsonData).to.have.property(\"data\").to.be.an(\"object\");",
									"});",
									"pm.test(\"Response contains a valid 'notification' object\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.data).to.have.property(\"notification\").to.be.an(\"object\");",
									"});",
									"pm.test(\"Response 'channelType' is 2\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.data.notification).to.have.property(\"channelType\", 2);",
									"});",
									"pm.test(\"Response 'deliveryStatus' is 1\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.data.notification).to.have.property(\"deliveryStatus\", 1);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "x-api-key",
								"value": "{{x-api-key}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    // Assuming providerId 2 also has channelType 2\n    \"providerId\": 2,\n    \"data\": {\n        \"from\": \"vikaskyatannawar@gmail.com\",\n        \"to\": \"vikas.k@osmosys.co\",\n        \"subject\": \"Test subject\",\n        \"text\": \"This is a test notification\",\n        \"html\": \"<b>This is a test notification</b>\"\n    }\n}"
						},
						"url": {
							"raw": "localhost:3000/notifications",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"notifications"
							]
						},
						"description": "Allows successfully creating new notification for the Mailgun channel type."
					},
					"response": []
				},
				{
					"name": "Send Mailgun Notification - Mismatch in ChannelType",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response is valid JSON\", function () {",
									"    pm.response.to.be.json;",
									"});",
									"pm.test(\"Response code is 400 Bad Request\", function () {",
									"    pm.expect(pm.response.code).to.equal(400);",
									"});",
									"pm.test(\"Response has valid 'status' and 'data' properties\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property(\"status\", \"fail\");",
									"    pm.expect(jsonData).to.have.property(\"data\");",
									"});",
									"pm.test(\"Response does not contain a valid 'notification' object\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.data).to.not.have.property(\"notification\").to.be.an(\"object\");",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "x-api-key",
								"value": "{{x-api-key}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    // Assuming providerId 600 does not have channelType 2\n    \"providerId\": 600,\n    \"data\": {\n        \"from\": \"vikaskyatannawar@gmail.com\",\n        \"to\": \"vikas.k@osmosys.co\",\n        \"subject\": \"Test subject\",\n        \"text\": \"This is a test notification\",\n        \"html\": \"<b>This is a test notification</b>\"\n    }\n}"
						},
						"url": {
							"raw": "localhost:3000/notifications",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"notifications"
							]
						},
						"description": "Allows successfully creating new notification for the Mailgun channel type."
					},
					"response": []
				},
				{
					"name": "Send Mailgun Notification - Missing To Field",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response is valid JSON\", function () {",
									"    pm.response.to.be.json;",
									"});",
									"pm.test(\"Response for Invalid Data (Missing 'to' Value)\", function () {",
									"    pm.expect(pm.response.code).to.equal(400);",
									"    pm.expect(pm.response.json().status).to.equal(\"fail\");",
									"    pm.expect(pm.response.json().data[0]).to.equal(\"to should not be empty\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "x-api-key",
								"value": "{{x-api-key}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"providerId\": 2,\n    \"data\": {\n        \"from\": \"vikaskyatannawar@gmail.com\",\n        \"subject\": \"Test subject\",\n        \"text\": \"This is a test notification\",\n        \"html\": \"<b>This is a test notification</b>\"\n    }\n}"
						},
						"url": {
							"raw": "localhost:3000/notifications",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"notifications"
							]
						},
						"description": "Allows representing failure in creating new notification for the Mailgun channel type when missing the `to` field."
					},
					"response": []
				},
				{
					"name": "Send Mailgun Notification - Invalid API Key",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response is valid JSON\", function () {",
									"    pm.response.to.be.json;",
									"});",
									"pm.test(\"Failed request with invalid x-api-key\", function () {",
									"    pm.expect(pm.response.code).to.equal(401);",
									"    pm.expect(pm.response.json().status).to.equal(\"fail\");",
									"    pm.expect(pm.response.json().data).to.equal(\"Invalid x-api-key\");",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "x-api-key",
								"value": "bad-api-key",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"providerId\": 2,\n    \"data\": {\n        \"from\": \"vikaskyatannawar@gmail.com\",\n        \"to\": \"vikas.k@osmosys.co\",\n        \"subject\": \"Test subject\",\n        \"text\": \"This is a test notification\",\n        \"html\": \"<b>This is a test notification</b>\"\n    }\n}"
						},
						"url": {
							"raw": "localhost:3000/notifications",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"notifications"
							]
						},
						"description": "Allows representing failure in creating new notification for the Mailgun channel type when passing invalid API key."
					},
					"response": []
				}
			],
			"description": "Collection of requests pertaining to creating notifications for the Mailgun channel type."
		},
		{
			"name": "360Dialog WhatsApp Notifications",
			"item": [
				{
					"name": "Send 360Dialog WhatsApp Notification - Success",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response is valid JSON\", function () {",
									"    pm.response.to.be.json;",
									"});",
									"pm.test(\"Response has valid 'status' and 'data' properties\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property(\"status\", \"success\");",
									"    pm.expect(jsonData).to.have.property(\"data\").to.be.an(\"object\");",
									"});",
									"pm.test(\"Response contains a valid 'notification' object\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.data).to.have.property(\"notification\").to.be.an(\"object\");",
									"});",
									"pm.test(\"Response 'channelType' is 3\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.data.notification).to.have.property(\"channelType\", 3);",
									"});",
									"pm.test(\"Response 'deliveryStatus' is 1\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.data.notification).to.have.property(\"deliveryStatus\", 1);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "x-api-key",
								"value": "{{x-api-key}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    // Assuming providerId 3 also has channelType 3\n    \"providerId\": 3,\n    \"data\": {\n        \"to\": \"919004812051\",\n        \"type\": \"template\",\n        \"template\": {\n            \"namespace\": \"d8bcb6bd_2ab2_439c_9d9e_947501266c77\",\n            \"name\": \"ir_incident_resolution\",\n            \"language\": {\n                \"policy\": \"deterministic\",\n                \"code\": \"en\"\n            },\n            \"components\": [\n                {\n                    \"type\": \"body\",\n                    \"parameters\": [\n                        {\n                            \"type\": \"text\",\n                            \"text\": \"Bishal Biswas\"\n                        },\n                        {\n                            \"type\": \"text\",\n                            \"text\": \"WNK227\"\n                        },\n                        {\n                            \"type\": \"text\",\n                            \"text\": \"Massive Earthquake\"\n                        },\n                        {\n                            \"type\": \"text\",\n                            \"text\": \"Power Grid\"\n                        },\n                        {\n                            \"type\": \"text\",\n                            \"text\": \"Bishal Mondal\"\n                        },\n                        {\n                            \"type\": \"text\",\n                            \"text\": \"Vikas\"\n                        },\n                        {\n                            \"type\": \"text\",\n                            \"text\": \"Open\"\n                        },\n                        {\n                            \"type\": \"text\",\n                            \"text\": \"10\"\n                        },\n                        {\n                            \"type\": \"text\",\n                            \"text\": \"15755\"\n                        }\n                    ]\n                }\n            ]\n        }\n    }\n}"
						},
						"url": {
							"raw": "localhost:3000/notifications",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"notifications"
							]
						},
						"description": "Allows successfully creating new notification for the 360Dialog WhatsApp channel type."
					},
					"response": []
				},
				{
					"name": "Send 360Dialog WhatsApp Notification - Mismatch in ChannelType",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response is valid JSON\", function () {",
									"    pm.response.to.be.json;",
									"});",
									"pm.test(\"Response code is 400 Bad Request\", function () {",
									"    pm.expect(pm.response.code).to.equal(400);",
									"});",
									"pm.test(\"Response has valid 'status' and 'data' properties\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property(\"status\", \"fail\");",
									"    pm.expect(jsonData).to.have.property(\"data\");",
									"});",
									"pm.test(\"Response does not contain a valid 'notification' object\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.data).to.not.have.property(\"notification\").to.be.an(\"object\");",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "x-api-key",
								"value": "{{x-api-key}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    // Assuming providerId 6 does not have channelType 3\n    \"providerId\": 6,\n    \"data\": {\n        \"to\": \"919004812051\",\n        \"type\": \"template\",\n        \"template\": {\n            \"namespace\": \"d8bcb6bd_2ab2_439c_9d9e_947501266c77\",\n            \"name\": \"ir_incident_resolution\",\n            \"language\": {\n                \"policy\": \"deterministic\",\n                \"code\": \"en\"\n            },\n            \"components\": [\n                {\n                    \"type\": \"body\",\n                    \"parameters\": [\n                        {\n                            \"type\": \"text\",\n                            \"text\": \"Bishal Biswas\"\n                        },\n                        {\n                            \"type\": \"text\",\n                            \"text\": \"WNK227\"\n                        },\n                        {\n                            \"type\": \"text\",\n                            \"text\": \"Massive Earthquake\"\n                        },\n                        {\n                            \"type\": \"text\",\n                            \"text\": \"Power Grid\"\n                        },\n                        {\n                            \"type\": \"text\",\n                            \"text\": \"Bishal Mondal\"\n                        },\n                        {\n                            \"type\": \"text\",\n                            \"text\": \"Vikas\"\n                        },\n                        {\n                            \"type\": \"text\",\n                            \"text\": \"Open\"\n                        },\n                        {\n                            \"type\": \"text\",\n                            \"text\": \"10\"\n                        },\n                        {\n                            \"type\": \"text\",\n                            \"text\": \"15755\"\n                        }\n                    ]\n                }\n            ]\n        }\n    }\n}"
						},
						"url": {
							"raw": "localhost:3000/notifications",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"notifications"
							]
						},
						"description": "Allows successfully creating new notification for the 360Dialog WhatsApp channel type."
					},
					"response": []
				},
				{
					"name": "Send 360Dialog WhatsApp Notification - Missing To Field",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response is valid JSON\", function () {",
									"    pm.response.to.be.json;",
									"});",
									"pm.test(\"Response for Invalid Data (Missing 'to' Value)\", function () {",
									"    pm.expect(pm.response.code).to.equal(400);",
									"    pm.expect(pm.response.json().status).to.equal(\"fail\");",
									"    pm.expect(pm.response.json().data[0]).to.equal(\"to should not be empty\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "x-api-key",
								"value": "{{x-api-key}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"providerId\": 3,\n    \"data\": {\n        \"type\": \"template\",\n        \"template\": {\n            \"namespace\": \"d8bcb6bd_2ab2_439c_9d9e_947501266c77\",\n            \"name\": \"ir_incident_resolution\",\n            \"language\": {\n                \"policy\": \"deterministic\",\n                \"code\": \"en\"\n            },\n            \"components\": [\n                {\n                    \"type\": \"body\",\n                    \"parameters\": [\n                        {\n                            \"type\": \"text\",\n                            \"text\": \"Bishal Biswas\"\n                        },\n                        {\n                            \"type\": \"text\",\n                            \"text\": \"WNK227\"\n                        },\n                        {\n                            \"type\": \"text\",\n                            \"text\": \"Massive Earthquake\"\n                        },\n                        {\n                            \"type\": \"text\",\n                            \"text\": \"Power Grid\"\n                        },\n                        {\n                            \"type\": \"text\",\n                            \"text\": \"Bishal Mondal\"\n                        },\n                        {\n                            \"type\": \"text\",\n                            \"text\": \"Vikas\"\n                        },\n                        {\n                            \"type\": \"text\",\n                            \"text\": \"Open\"\n                        },\n                        {\n                            \"type\": \"text\",\n                            \"text\": \"10\"\n                        },\n                        {\n                            \"type\": \"text\",\n                            \"text\": \"15755\"\n                        }\n                    ]\n                }\n            ]\n        }\n    }\n}"
						},
						"url": {
							"raw": "localhost:3000/notifications",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"notifications"
							]
						},
						"description": "Allows representing failure in creating new notification for the 360Dialog WhatsApp channel type when missing the `to` field."
					},
					"response": []
				},
				{
					"name": "Send 360Dialog WhatsApp Notification - Invalid API Key",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response is valid JSON\", function () {",
									"    pm.response.to.be.json;",
									"});",
									"pm.test(\"Failed request with invalid x-api-key\", function () {",
									"    pm.expect(pm.response.code).to.equal(401);",
									"    pm.expect(pm.response.json().status).to.equal(\"fail\");",
									"    pm.expect(pm.response.json().data).to.equal(\"Invalid x-api-key\");",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "x-api-key",
								"value": "bad-api-key",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"providerId\": 3,\n    \"data\": {\n        \"to\": \"919004812051\",\n        \"type\": \"template\",\n        \"template\": {\n            \"namespace\": \"d8bcb6bd_2ab2_439c_9d9e_947501266c77\",\n            \"name\": \"ir_incident_resolution\",\n            \"language\": {\n                \"policy\": \"deterministic\",\n                \"code\": \"en\"\n            },\n            \"components\": [\n                {\n                    \"type\": \"body\",\n                    \"parameters\": [\n                        {\n                            \"type\": \"text\",\n                            \"text\": \"Bishal Biswas\"\n                        },\n                        {\n                            \"type\": \"text\",\n                            \"text\": \"WNK227\"\n                        },\n                        {\n                            \"type\": \"text\",\n                            \"text\": \"Massive Earthquake\"\n                        },\n                        {\n                            \"type\": \"text\",\n                            \"text\": \"Power Grid\"\n                        },\n                        {\n                            \"type\": \"text\",\n                            \"text\": \"Bishal Mondal\"\n                        },\n                        {\n                            \"type\": \"text\",\n                            \"text\": \"Vikas\"\n                        },\n                        {\n                            \"type\": \"text\",\n                            \"text\": \"Open\"\n                        },\n                        {\n                            \"type\": \"text\",\n                            \"text\": \"10\"\n                        },\n                        {\n                            \"type\": \"text\",\n                            \"text\": \"15755\"\n                        }\n                    ]\n                }\n            ]\n        }\n    }\n}"
						},
						"url": {
							"raw": "localhost:3000/notifications",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"notifications"
							]
						},
						"description": "Allows representing failure in creating new notification for the 360Dialog WhatsApp channel type when passing invalid API key."
					},
					"response": []
				}
			],
			"description": "Collection of requests pertaining to creating notifications for the 360Dialog WhatsApp channel type."
		},
		{
			"name": "Twilio WhatsApp Notifications",
			"item": [
				{
					"name": "Send Twilio WhatsApp Notification - Success",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response is valid JSON\", function () {",
									"    pm.response.to.be.json;",
									"});",
									"pm.test(\"Response has valid 'status' and 'data' properties\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property(\"status\", \"success\");",
									"    pm.expect(jsonData).to.have.property(\"data\").to.be.an(\"object\");",
									"});",
									"pm.test(\"Response contains a valid 'notification' object\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.data).to.have.property(\"notification\").to.be.an(\"object\");",
									"});",
									"pm.test(\"Response 'channelType' is 4\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.data.notification).to.have.property(\"channelType\",4);",
									"});",
									"pm.test(\"Response 'deliveryStatus' is 1\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.data.notification).to.have.property(\"deliveryStatus\", 1);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "x-api-key",
								"value": "{{x-api-key}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    // Assuming providerId 4 also has channelType 4\n    \"providerId\": 4,\n    \"data\": {\n        \"to\": \"+919004812051\",\n        \"message\": \"Your appointment is coming up on July 21 at 3PM\"\n    }\n}"
						},
						"url": {
							"raw": "localhost:3000/notifications",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"notifications"
							]
						},
						"description": "Allows successfully creating new notification for the Twilio WhatsApp channel type."
					},
					"response": []
				},
				{
					"name": "Send Twilio WhatsApp Notification - Mismatch in ChannelType",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response is valid JSON\", function () {",
									"    pm.response.to.be.json;",
									"});",
									"pm.test(\"Response code is 400 Bad Request\", function () {",
									"    pm.expect(pm.response.code).to.equal(400);",
									"});",
									"pm.test(\"Response has valid 'status' and 'data' properties\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property(\"status\", \"fail\");",
									"    pm.expect(jsonData).to.have.property(\"data\");",
									"});",
									"pm.test(\"Response does not contain a valid 'notification' object\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.data).to.not.have.property(\"notification\").to.be.an(\"object\");",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "x-api-key",
								"value": "{{x-api-key}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    // Assuming providerId 10 does not have channelType 4\n    \"providerId\": 10,\n    \"data\": {\n        \"to\": \"+919004812051\",\n        \"message\": \"Your appointment is coming up on July 21 at 3PM\"\n    }\n}"
						},
						"url": {
							"raw": "localhost:3000/notifications",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"notifications"
							]
						},
						"description": "Allows successfully creating new notification for the Twilio WhatsApp channel type."
					},
					"response": []
				},
				{
					"name": "Send Twilio WhatsApp Notification - Missing To Field",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response is valid JSON\", function () {",
									"    pm.response.to.be.json;",
									"});",
									"pm.test(\"Response for Invalid Data (Missing 'to' Value)\", function () {",
									"    pm.expect(pm.response.code).to.equal(400);",
									"    pm.expect(pm.response.json().status).to.equal(\"fail\");",
									"    pm.expect(pm.response.json().data[0]).to.equal(\"to should not be empty\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "x-api-key",
								"value": "{{x-api-key}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"providerId\": 4,\n    \"data\": {\n        \"message\": \"Your appointment is coming up on July 21 at 3PM\"\n    }\n}"
						},
						"url": {
							"raw": "localhost:3000/notifications",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"notifications"
							]
						},
						"description": "Allows representing failure in creating new notification for the Twilio WhatsApp channel type when missing the `to` field."
					},
					"response": []
				},
				{
					"name": "Send Twilio WhatsApp Notification - Invalid API Key",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response is valid JSON\", function () {",
									"    pm.response.to.be.json;",
									"});",
									"pm.test(\"Failed request with invalid x-api-key\", function () {",
									"    pm.expect(pm.response.code).to.equal(401);",
									"    pm.expect(pm.response.json().status).to.equal(\"fail\");",
									"    pm.expect(pm.response.json().data).to.equal(\"Invalid x-api-key\");",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "x-api-key",
								"value": "bad-api-key",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"providerId\": 4,\n    \"data\": {\n        \"to\": \"+919004812051\",\n        \"message\": \"Your appointment is coming up on July 21 at 3PM\"\n    }\n}"
						},
						"url": {
							"raw": "localhost:3000/notifications",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"notifications"
							]
						},
						"description": "Allows representing failure in creating new notification for the Twilio WhatsApp channel type when passing invalid API key."
					},
					"response": []
				}
			],
			"description": "Collection of requests pertaining to creating notifications for the Twilio WhatsApp channel type."
		},
		{
			"name": "Twilio SMS Notifications",
			"item": [
				{
					"name": "Send Twilio SMS Notification - Success",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response is valid JSON\", function () {",
									"  pm.response.to.be.json;",
									"});",
									"pm.test(\"Response has valid 'status' and 'data' properties\", function () {",
									"  var jsonData = pm.response.json();",
									"  pm.expect(jsonData).to.have.property(\"status\", \"success\");",
									"  pm.expect(jsonData).to.have.property(\"data\").to.be.an(\"object\");",
									"});",
									"pm.test(\"Response contains a valid 'notification' object\", function () {",
									"  var jsonData = pm.response.json();",
									"  pm.expect(jsonData.data).to.have.property(\"notification\").to.be.an(\"object\");",
									"});",
									"pm.test(\"Response 'channelType' is 5\", function () {",
									"  var jsonData = pm.response.json();",
									"  pm.expect(jsonData.data.notification).to.have.property(\"channelType\", 5);",
									"});",
									"pm.test(\"Response 'deliveryStatus' is 1\", function () {",
									"  var jsonData = pm.response.json();",
									"  pm.expect(jsonData.data.notification).to.have.property(\"deliveryStatus\", 1);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "x-api-key",
								"value": "{{x-api-key}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    // Assuming providerId 5 also has channelType 5\n    \"providerId\": 5,\n    \"data\": {\n        \"to\": \"+15005550006\",\n        \"message\": \"Your appointment is coming up on March 21 at 2PM\"\n    }\n}"
						},
						"url": {
							"raw": "localhost:3000/notifications",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"notifications"
							]
						},
						"description": "Allows successfully creating new notification for the Twilio SMS channel type."
					},
					"response": []
				},
				{
					"name": "Send Twilio SMS Notification - Mismatch in ChannelType",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response is valid JSON\", function () {",
									"    pm.response.to.be.json;",
									"});",
									"pm.test(\"Response code is 400 Bad Request\", function () {",
									"    pm.expect(pm.response.code).to.equal(400);",
									"});",
									"pm.test(\"Response has valid 'status' and 'data' properties\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property(\"status\", \"fail\");",
									"    pm.expect(jsonData).to.have.property(\"data\");",
									"});",
									"pm.test(\"Response does not contain a valid 'notification' object\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.data).to.not.have.property(\"notification\").to.be.an(\"object\");",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "x-api-key",
								"value": "{{x-api-key}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    // Assuming providerId 10 does not have channelType 5\n    \"providerId\": 10,\n    \"data\": {\n        \"to\": \"+15005550006\",\n        \"message\": \"Your appointment is coming up on March 21 at 2PM\"\n    }\n}"
						},
						"url": {
							"raw": "localhost:3000/notifications",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"notifications"
							]
						},
						"description": "Allows successfully creating new notification for the Twilio SMS channel type."
					},
					"response": []
				},
				{
					"name": "Send Twilio SMS Notification - Missing To Field",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response is valid JSON\", function () {",
									"  pm.response.to.be.json;",
									"});",
									"pm.test(\"Response for Invalid Data (Missing 'to' Value)\", function () {",
									"  pm.expect(pm.response.code).to.equal(400);",
									"  pm.expect(pm.response.json().status).to.equal(\"fail\");",
									"  pm.expect(pm.response.json().data[0]).to.equal(",
									"    \"to must be shorter than or equal to 16 characters\",",
									"    \"to should not be empty\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "x-api-key",
								"value": "{{x-api-key}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"providerId\": 5,\n    \"data\": {\n        \"message\": \"Your appointment is coming up on March 21 at 2PM\"\n    }\n}"
						},
						"url": {
							"raw": "localhost:3000/notifications",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"notifications"
							]
						},
						"description": "Allows representing failure in creating new notification for the Twilio SMS channel type when missing the `to` field."
					},
					"response": []
				},
				{
					"name": "Send Twilio SMS Notification - Invalid API Key",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response is valid JSON\", function () {",
									"  pm.response.to.be.json;",
									"});",
									"pm.test(\"Failed request with invalid x-api-key\", function () {",
									"  pm.expect(pm.response.code).to.equal(401);",
									"  pm.expect(pm.response.json().status).to.equal(\"fail\");",
									"  pm.expect(pm.response.json().data).to.equal(\"Invalid x-api-key\");",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "x-api-key",
								"value": "bad-api-key",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"providerId\": 5,\n    \"data\": {\n        \"to\": \"+15005550006\",\n        \"message\": \"Your appointment is coming up on March 21 at 2PM\"\n    }\n}"
						},
						"url": {
							"raw": "localhost:3000/notifications",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"notifications"
							]
						},
						"description": "Allows representing failure in creating new notification for the Twilio SMS channel type when passing invalid API key."
					},
					"response": []
				}
			],
			"description": "Collection of requests pertaining to creating notifications for the Twilio SMS channel type."
		},
		{
			"name": "Plivo SMS Notifications",
			"item": [
				{
					"name": "Send Plivo SMS Notification - Success",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response is valid JSON\", function () {",
									"  pm.response.to.be.json;",
									"});",
									"pm.test(\"Response has valid 'status' and 'data' properties\", function () {",
									"  var jsonData = pm.response.json();",
									"  pm.expect(jsonData).to.have.property(\"status\", \"success\");",
									"  pm.expect(jsonData).to.have.property(\"data\").to.be.an(\"object\");",
									"});",
									"pm.test(\"Response contains a valid 'notification' object\", function () {",
									"  var jsonData = pm.response.json();",
									"  pm.expect(jsonData.data).to.have.property(\"notification\").to.be.an(\"object\");",
									"});",
									"pm.test(\"Response 'channelType' is 6\", function () {",
									"  var jsonData = pm.response.json();",
									"  pm.expect(jsonData.data.notification).to.have.property(\"channelType\", 6);",
									"});",
									"pm.test(\"Response 'deliveryStatus' is 1\", function () {",
									"  var jsonData = pm.response.json();",
									"  pm.expect(jsonData.data.notification).to.have.property(\"deliveryStatus\", 1);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "x-api-key",
								"value": "{{x-api-key}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    // Assuming providerId 6 also has channelType 6\n    \"providerId\": 6,\n    \"data\": {\n        \"to\": \"+918900100002\",\n        \"message\": \"This is a test message from OsmoX\"\n    }\n}"
						},
						"url": {
							"raw": "localhost:3000/notifications",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"notifications"
							]
						},
						"description": "Allows successfully creating new notification for the Plivo SMS channel type."
					},
					"response": []
				},
				{
					"name": "Send Plivo SMS Notification - Mismatch in ChannelType",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response is valid JSON\", function () {",
									"    pm.response.to.be.json;",
									"});",
									"pm.test(\"Response code is 400 Bad Request\", function () {",
									"    pm.expect(pm.response.code).to.equal(400);",
									"});",
									"pm.test(\"Response has valid 'status' and 'data' properties\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property(\"status\", \"fail\");",
									"    pm.expect(jsonData).to.have.property(\"data\");",
									"});",
									"pm.test(\"Response does not contain a valid 'notification' object\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.data).to.not.have.property(\"notification\").to.be.an(\"object\");",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "x-api-key",
								"value": "{{x-api-key}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    // Assuming providerId 1 does not have channelType 6\n    \"providerId\": 1,\n    \"data\": {\n        \"to\": \"+918900100002\",\n        \"message\": \"This is a test message from OsmoX\"\n    }\n}"
						},
						"url": {
							"raw": "localhost:3000/notifications",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"notifications"
							]
						},
						"description": "Allows successfully creating new notification for the Plivo SMS channel type."
					},
					"response": []
				},
				{
					"name": "Send Plivo SMS Notification - Missing To Field",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response is valid JSON\", function () {",
									"  pm.response.to.be.json;",
									"});",
									"pm.test(\"Response for Invalid Data (Missing 'to' Value)\", function () {",
									"  pm.expect(pm.response.code).to.equal(400);",
									"  pm.expect(pm.response.json().status).to.equal(\"fail\");",
									"  pm.expect(pm.response.json().data[0]).to.equal(",
									"    \"to must be shorter than or equal to 14 characters\",",
									"    \"to should not be empty\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "x-api-key",
								"value": "{{x-api-key}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"providerId\": 6,\n    \"data\": {\n        \"message\": \"This is a test message from OsmoX\"\n    }\n}"
						},
						"url": {
							"raw": "localhost:3000/notifications",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"notifications"
							]
						},
						"description": "Allows representing failure in creating new notification for the Plivo SMS channel type when missing the `to` field."
					},
					"response": []
				},
				{
					"name": "Send Plivo SMS Notification - Invalid API Key",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response is valid JSON\", function () {",
									"  pm.response.to.be.json;",
									"});",
									"pm.test(\"Failed request with invalid x-api-key\", function () {",
									"  pm.expect(pm.response.code).to.equal(401);",
									"  pm.expect(pm.response.json().status).to.equal(\"fail\");",
									"  pm.expect(pm.response.json().data).to.equal(\"Invalid x-api-key\");",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "x-api-key",
								"value": "bad-api-key",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"providerId\": 6,\n    \"data\": {\n        \"to\": \"+918900100002\",\n        \"message\": \"This is a test message from OsmoX\"\n    }\n}"
						},
						"url": {
							"raw": "localhost:3000/notifications",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"notifications"
							]
						},
						"description": "Allows representing failure in creating new notification for the Plivo SMS channel type when passing invalid API key."
					},
					"response": []
				}
			],
			"description": "Collection of requests pertaining to creating notifications for the Plivo SMS channel type."
		},
		{
			"name": "Twilio WhatsApp (Business) Notifications",
			"item": [
				{
					"name": "Send Twilio WhatsApp (Business) Notification - Success",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response is valid JSON\", function () {",
									"    pm.response.to.be.json;",
									"});",
									"pm.test(\"Response has valid 'status' and 'data' properties\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property(\"status\", \"success\");",
									"    pm.expect(jsonData).to.have.property(\"data\").to.be.an(\"object\");",
									"});",
									"pm.test(\"Response contains a valid 'notification' object\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.data).to.have.property(\"notification\").to.be.an(\"object\");",
									"});",
									"pm.test(\"Response 'channelType' is 7\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.data.notification).to.have.property(\"channelType\", 7);",
									"});",
									"pm.test(\"Response 'deliveryStatus' is 1\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.data.notification).to.have.property(\"deliveryStatus\", 1);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "x-api-key",
								"value": "{{x-api-key}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  // Set your respective providerId\n  \"providerId\": 7,\n  \"data\": {\n    \"contentSid\": \"HXxxxxxxxxxxxxxxxxxxxx\",\n    \"from\": \"MGxxxxxxxxxxxxxxxxxxx\",\n    \"contentVariables\": {\n      \"1\": \"Name\",\n      \"2\": \"2\",\n      \"3\": \"29-04-2024\",\n      \"4\": \"03-05-2024\",\n      \"5\": \"Sunday, 05-05-2024\"\n    },\n    \"to\": \"+91xxxxxxxxxxx\"\n  }\n}"
						},
						"url": {
							"raw": "localhost:3000/notifications",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"notifications"
							]
						},
						"description": "Allows successfully creating new notification for the Twilio WhatsApp (Business) channel type."
					},
					"response": []
				},
				{
					"name": "Send Twilio WhatsApp (Business) Notification - Invalid Provider ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response is valid JSON\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"pm.test(\"Response code is 400 Bad Request\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(400);\r",
									"});\r",
									"pm.test(\"Response has valid 'status' and 'data' properties\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property(\"status\", \"fail\");\r",
									"    pm.expect(jsonData).to.have.property(\"data\");\r",
									"});\r",
									"pm.test(\"Response does not contain a valid 'notification' object\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.data).to.not.have.property(\"notification\").to.be.an(\"object\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "x-api-key",
								"value": "{{x-api-key}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  // // Assuming providerId 77 does not have channelType 7\n  \"providerId\": 77,\n  \"data\": {\n    \"contentSid\": \"HXxxxxxxxxxxxxxxxxxxxx\",\n    \"from\": \"MGxxxxxxxxxxxxxxxxxxx\",\n    \"contentVariables\": {\n      \"1\": \"Name\",\n      \"2\": \"2\",\n      \"3\": \"29-04-2024\",\n      \"4\": \"03-05-2024\",\n      \"5\": \"Sunday, 05-05-2024\"\n    },\n    \"to\": \"+91xxxxxxxxxxx\"\n  }\n}"
						},
						"url": {
							"raw": "localhost:3000/notifications",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"notifications"
							]
						},
						"description": "Allows successfully creating new notification for the Twilio WhatsApp (Business) channel type."
					},
					"response": []
				},
				{
					"name": "Send Twilio WhatsApp (Business) Notification - Missing To Field",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response is valid JSON\", function () {",
									"    pm.response.to.be.json;",
									"});",
									"pm.test(\"Response for Invalid Data (Missing 'to' Value)\", function () {",
									"    pm.expect(pm.response.code).to.equal(400);",
									"    pm.expect(pm.response.json().status).to.equal(\"fail\");",
									"    pm.expect(pm.response.json().data[0]).to.equal(\"to should not be empty\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "x-api-key",
								"value": "{{x-api-key}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  // Set your respective providerId\n  \"providerId\": 7,\n  \"data\": {\n    \"contentSid\": \"HXxxxxxxxxxxxxxxxxxxxx\",\n    \"from\": \"MGxxxxxxxxxxxxxxxxxxx\",\n    \"contentVariables\": {\n      \"1\": \"Name\",\n      \"2\": \"2\",\n      \"3\": \"29-04-2024\",\n      \"4\": \"03-05-2024\",\n      \"5\": \"Sunday, 05-05-2024\"\n    }\n  }\n}"
						},
						"url": {
							"raw": "localhost:3000/notifications",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"notifications"
							]
						},
						"description": "Allows representing failure in creating new notification for the Twilio WhatsApp (Business) channel type when missing the `to` field."
					},
					"response": []
				},
				{
					"name": "Send Twilio WhatsApp (Business) Notification - Invalid API Key",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response is valid JSON\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"pm.test(\"Failed request with invalid x-api-key\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(401);\r",
									"    pm.expect(pm.response.json().status).to.equal(\"fail\");\r",
									"    pm.expect(pm.response.json().data).to.equal(\"Invalid x-api-key\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "x-api-key",
								"value": "bad-api-key",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  // Set your respective providerId\n  \"providerId\": 7,\n  \"data\": {\n    \"contentSid\": \"HXxxxxxxxxxxxxxxxxxxxx\",\n    \"from\": \"MGxxxxxxxxxxxxxxxxxxx\",\n    \"contentVariables\": {\n      \"1\": \"Name\",\n      \"2\": \"2\",\n      \"3\": \"29-04-2024\",\n      \"4\": \"03-05-2024\",\n      \"5\": \"Sunday, 05-05-2024\"\n    },\n    \"to\": \"+91xxxxxxxxxxx\"\n  }\n}"
						},
						"url": {
							"raw": "localhost:3000/notifications",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"notifications"
							]
						},
						"description": "Allows representing failure in creating new notification for the Twilio WhatsApp (Business) channel type when passing invalid API key."
					},
					"response": []
				}
			],
			"description": "Collection of requests pertaining to creating notifications for the Twilio WhatsApp channel type using templates."
		},
		{
			"name": "KAPS SMS Notifications",
			"item": [
				{
					"name": "Send KAPS SMS Notification - Success",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response is valid JSON\", function () {",
									"  pm.response.to.be.json;",
									"});",
									"pm.test(\"Response has valid 'status' and 'data' properties\", function () {",
									"  var jsonData = pm.response.json();",
									"  pm.expect(jsonData).to.have.property(\"status\", \"success\");",
									"  pm.expect(jsonData).to.have.property(\"data\").to.be.an(\"object\");",
									"});",
									"pm.test(\"Response contains a valid 'notification' object\", function () {",
									"  var jsonData = pm.response.json();",
									"  pm.expect(jsonData.data).to.have.property(\"notification\").to.be.an(\"object\");",
									"});",
									"pm.test(\"Response 'channelType' is 8\", function () {",
									"  var jsonData = pm.response.json();",
									"  pm.expect(jsonData.data.notification).to.have.property(\"channelType\", 8);",
									"});",
									"pm.test(\"Response 'deliveryStatus' is 1\", function () {",
									"  var jsonData = pm.response.json();",
									"  pm.expect(jsonData.data.notification).to.have.property(\"deliveryStatus\", 1);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "x-api-key",
								"value": "{{x-api-key}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    // Assuming providerId 8 also has channelType 8\n    \"providerId\": 8,\n    \"data\": {\n        \"indiaDltContentTemplateId\": \"1707160146562806652\",\n        \"indiaDltPrincipalEntityId\":\"1601100000000005964\",\n        \"to\": \"+918900100002,+918900100003\",\n        \"text\": \"This is a test message from OsmoX.\\nThank you for using our service.\"\n    }\n}"
						},
						"url": {
							"raw": "localhost:3000/notifications",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"notifications"
							]
						},
						"description": "Allows successfully creating new notification for the KAPS SMS channel type."
					},
					"response": []
				},
				{
					"name": "Send KAPS SMS Notification - Mismatch in ChannelType",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response is valid JSON\", function () {",
									"    pm.response.to.be.json;",
									"});",
									"pm.test(\"Response code is 400 Bad Request\", function () {",
									"    pm.expect(pm.response.code).to.equal(400);",
									"});",
									"pm.test(\"Response has valid 'status' and 'data' properties\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property(\"status\", \"fail\");",
									"    pm.expect(jsonData).to.have.property(\"data\");",
									"});",
									"pm.test(\"Response does not contain a valid 'notification' object\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.data).to.not.have.property(\"notification\").to.be.an(\"object\");",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "x-api-key",
								"value": "{{x-api-key}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    // Assuming providerId 100 does not have channelType 8\n    \"providerId\": 100,\n    \"data\": {\n        \"indiaDltContentTemplateId\": \"1707160146562806652\",\n        \"indiaDltPrincipalEntityId\":\"1601100000000005964\",\n        \"to\": \"+918900100002,+918900100003\",\n        \"text\": \"This is a test message from OsmoX.\\nThank you for using our service.\"\n    }\n}"
						},
						"url": {
							"raw": "localhost:3000/notifications",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"notifications"
							]
						},
						"description": "Allows successfully creating new notification for the KAPS SMS channel type."
					},
					"response": []
				},
				{
					"name": "Send KAPS SMS Notification - Missing To Field",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response is valid JSON\", function () {",
									"  pm.response.to.be.json;",
									"});",
									"pm.test(\"Response for Invalid Data (Missing 'to' Value)\", function () {",
									"  pm.expect(pm.response.code).to.equal(400);",
									"  pm.expect(pm.response.json().status).to.equal(\"fail\");",
									"  pm.expect(pm.response.json().data[0]).to.equal(\"to should not be empty\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "x-api-key",
								"value": "{{x-api-key}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"providerId\": 8,\n    \"data\": {\n        \"indiaDltContentTemplateId\": \"1707160146562806652\",\n        \"indiaDltPrincipalEntityId\":\"1601100000000005964\",\n        \"text\": \"This is a test message from OsmoX.\\nThank you for using our service.\"\n    }\n}"
						},
						"url": {
							"raw": "localhost:3000/notifications",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"notifications"
							]
						},
						"description": "Allows representing failure in creating new notification for the KAPS SMS channel type when missing the `to` field."
					},
					"response": []
				},
				{
					"name": "Send KAPS SMS Notification - Invalid API Key",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response is valid JSON\", function () {",
									"  pm.response.to.be.json;",
									"});",
									"pm.test(\"Failed request with invalid x-api-key\", function () {",
									"  pm.expect(pm.response.code).to.equal(401);",
									"  pm.expect(pm.response.json().status).to.equal(\"fail\");",
									"  pm.expect(pm.response.json().data).to.equal(\"Invalid x-api-key\");",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "x-api-key",
								"value": "bad-api-key",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"providerId\": 8,\n    \"data\": {\n        \"indiaDltContentTemplateId\": \"1707160146562806652\",\n        \"indiaDltPrincipalEntityId\": \"1601100000000005964\",\n        \"to\": \"+918900100002,+918900100003\",\n        \"text\": \"This is a test message from OsmoX.\\nThank you for using our service.\"\n    }\n}"
						},
						"url": {
							"raw": "localhost:3000/notifications",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"notifications"
							]
						},
						"description": "Allows representing failure in creating new notification for the KAPS SMS channel type when passing invalid API key."
					},
					"response": []
				}
			],
			"description": "Collection of requests pertaining to creating notifications for the KAPS SMS channel type."
		},
		{
			"name": "Push Notification",
			"item": [
				{
					"name": "PushNotification_Android",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response is valid JSON\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"pm.test(\"Response has valid 'status' and 'data' properties\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property(\"status\", \"success\");\r",
									"    pm.expect(jsonData).to.have.property(\"data\").to.be.an(\"object\");\r",
									"});\r",
									"pm.test(\"Response contains a valid 'notification' object\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.data).to.have.property(\"notification\").to.be.an(\"object\");\r",
									"});\r",
									"pm.test(\"Response 'channelType' is 9\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.data.notification).to.have.property(\"channelType\", 9);\r",
									"});\r",
									"pm.test(\"Response 'deliveryStatus' is 1\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.data.notification).to.have.property(\"deliveryStatus\", 1);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "x-api-key",
								"value": "{{x-api-key}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    // Assuming providerId 9 also has channelType 9\n    \"providerId\": 9,\n    \"data\": {\n        \"message\": {\n            \"GCM\": \"{\\\"notification\\\":{\\\"title\\\":\\\"Test Notification\\\",\\\"body\\\":\\\"This is a test notification\\\"}}\"\n        },\n        \"target\": \"arn:aws:sns:us-west-2:505884080245:endpoint/GCM/OQSHA-Android/7fb080a5-a5e9-38f0-98fe-ebd0396e0076\"\n    }\n}"
						},
						"url": {
							"raw": "localhost:3000/notifications",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"notifications"
							]
						},
						"description": "Allows successfully creating new notification for the SES Push Notification channel type for Android."
					},
					"response": []
				},
				{
					"name": "PushNotification_iOS",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response is valid JSON\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"pm.test(\"Response has valid 'status' and 'data' properties\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property(\"status\", \"success\");\r",
									"    pm.expect(jsonData).to.have.property(\"data\").to.be.an(\"object\");\r",
									"});\r",
									"pm.test(\"Response contains a valid 'notification' object\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.data).to.have.property(\"notification\").to.be.an(\"object\");\r",
									"});\r",
									"pm.test(\"Response 'channelType' is 9\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.data.notification).to.have.property(\"channelType\", 9);\r",
									"});\r",
									"pm.test(\"Response 'deliveryStatus' is 1\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.data.notification).to.have.property(\"deliveryStatus\", 1);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "x-api-key",
								"value": "{{x-api-key}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    // Assuming providerId 9 also has channelType 9\n    \"providerId\": 9,\n    \"data\": {\n        \"message\": {\n            \"APNS_SANDBOX\": \"{\\\"aps\\\":{\\\"alert\\\":{\\\"title\\\":\\\"Hello World\\\",\\\"body\\\":\\\"This is a test message\\\"},\\\"sound\\\":\\\"default\\\"}}\"\n        },\n        // \"target\": \"arn:aws:sns:us-west-2:505884080245:endpoint/GCM/OQSHA-Android/7fb080a5-a5e9-38f0-98fe-ebd0396e0076\" \n        \"target\": \"arn:aws:sns:us-west-2:505884080245:endpoint/APNS_SANDBOX/OQSHA-iOS-Dev/57711edf-6265-32fc-be15-1a0cfdcad72e\"\n    }\n}"
						},
						"url": {
							"raw": "localhost:3000/notifications",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"notifications"
							]
						},
						"description": "Allows successfully creating new notification for the SES Push Notification channel type for iOS."
					},
					"response": []
				}
			],
			"description": "Request to add push notification"
		},
		{
			"name": "Twilio Voice Call Notifications",
			"item": [
				{
					"name": "Send Twilio Voice Call Notification - Success",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response is valid JSON\", function () {",
									"    pm.response.to.be.json;",
									"});",
									"pm.test(\"Response has valid 'status' and 'data' properties\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property(\"status\", \"success\");",
									"    pm.expect(jsonData).to.have.property(\"data\").to.be.an(\"object\");",
									"});",
									"pm.test(\"Response contains a valid 'notification' object\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.data).to.have.property(\"notification\").to.be.an(\"object\");",
									"});",
									"pm.test(\"Response 'channelType' is 10\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.data.notification).to.have.property(\"channelType\", 10);",
									"});",
									"pm.test(\"Response 'deliveryStatus' is 1\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.data.notification).to.have.property(\"deliveryStatus\", 1);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "x-api-key",
								"value": "{{x-api-key}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    // Assuming providerId 10 also has channelType 10\n    \"providerId\": 10,\n    \"data\": {\n        \"from\": \"+15005550006\",\n        \"to\": \"+91xxxxxxxxxx\",\n        \"url\": \"http://your-server-url/calls/message\",\n        \"twiml\": \"<Response><Say>Hello there!</Say></Response>\"\n    }\n}"
						},
						"url": {
							"raw": "localhost:3000/notifications",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"notifications"
							]
						},
						"description": "Allows successfully creating new notification for the Twilio Voice Call channel type."
					},
					"response": []
				},
				{
					"name": "Send Twilio Voice Call Notification - Invalid Provider ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response is valid JSON\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"pm.test(\"Response code is 400 Bad Request\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(400);\r",
									"});\r",
									"pm.test(\"Response has valid 'status' and 'data' properties\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property(\"status\", \"fail\");\r",
									"    pm.expect(jsonData).to.have.property(\"data\");\r",
									"});\r",
									"pm.test(\"Response does not contain a valid 'notification' object\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.data).to.not.have.property(\"notification\").to.be.an(\"object\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "x-api-key",
								"value": "{{x-api-key}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    // Assuming providerId 100 does not have channelType 10\n    \"providerId\": 100,\n    \"data\": {\n        \"from\": \"+15005550006\",\n        \"to\": \"+91xxxxxxxxxx\",\n        \"url\": \"http://your-server-url/calls/message\",\n        \"twiml\": \"<Response><Say>Hello there!</Say></Response>\",\n        \"fallbackUrl\": \"http://fallback-server-url/calls/message\"\n    }\n}"
						},
						"url": {
							"raw": "localhost:3000/notifications",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"notifications"
							]
						},
						"description": "Allows successfully creating new notification for the Twilio Voice Call channel type."
					},
					"response": []
				},
				{
					"name": "Send Twilio Voice Call Notification - Missing To Field",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response is valid JSON\", function () {",
									"    pm.response.to.be.json;",
									"});",
									"pm.test(\"Response for Invalid Data (Missing 'to' Value)\", function () {",
									"    pm.expect(pm.response.code).to.equal(400);",
									"    pm.expect(pm.response.json().status).to.equal(\"fail\");",
									"    pm.expect(pm.response.json().data[0]).to.equal(\"to should not be empty\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "x-api-key",
								"value": "{{x-api-key}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    // Assuming providerId 10 also has channelType 10\n    \"providerId\": 10,\n    \"data\": {\n        \"from\": \"+15005550006\",\n        \"url\": \"http://your-server-url/calls/message\",\n        \"twiml\": \"<Response><Say>Hello there!</Say></Response>\",\n        \"fallbackUrl\": \"http://fallback-server-url/calls/message\"\n    }\n}"
						},
						"url": {
							"raw": "localhost:3000/notifications",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"notifications"
							]
						},
						"description": "Allows representing failure in creating new notification for the Twilio Voice Call channel type when missing the `to` field."
					},
					"response": []
				},
				{
					"name": "Send Twilio Voice Call Notification - Missing both url and twiml fields",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response is valid JSON\", function () {",
									"    pm.response.to.be.json;",
									"});",
									"pm.test(\"Response for Invalid Data (Must provide url or twiml parameter)\", function () {",
									"    pm.expect(pm.response.code).to.equal(400);",
									"    pm.expect(pm.response.json().status).to.equal(\"fail\");",
									"    pm.expect(pm.response.json().data[0]).to.equal(\"Must provide url or twiml parameter\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "x-api-key",
								"value": "{{x-api-key}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    // Assuming providerId 10 also has channelType 10\n    \"providerId\": 10,\n    \"data\": {\n        \"from\": \"+15005550006\",\n        \"to\": \"+91xxxxxxxxxx\",\n        \"fallbackUrl\": \"http://fallback-server-url/calls/message\"\n    }\n}"
						},
						"url": {
							"raw": "localhost:3000/notifications",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"notifications"
							]
						},
						"description": "Allows representing failure in creating new notification for the Twilio Voice Call channel type when missing both `url` and `twiml` fields."
					},
					"response": []
				},
				{
					"name": "Send Twilio Voice Call Notification - Invalid API Key",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response is valid JSON\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"pm.test(\"Failed request with invalid x-api-key\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(401);\r",
									"    pm.expect(pm.response.json().status).to.equal(\"fail\");\r",
									"    pm.expect(pm.response.json().data).to.equal(\"Invalid x-api-key\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "x-api-key",
								"value": "bad-api-key",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    // Assuming providerId 10 also has channelType 10\n    \"providerId\": 10,\n    \"data\": {\n        \"from\": \"+15005550006\",\n        \"to\": \"+91xxxxxxxxxx\",\n        \"url\": \"http://your-server-url/calls/message\",\n        \"twiml\": \"<Response><Say>Hello there!</Say></Response>\"\n    }\n}"
						},
						"url": {
							"raw": "localhost:3000/notifications",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"notifications"
							]
						},
						"description": "Allows representing failure in creating new notification for the Twilio Voice Call channel type when passing invalid API key."
					},
					"response": []
				}
			],
			"description": "Collection of requests pertaining to creating notifications for the Twilio Voice Call channel type using templates."
		},
		{
			"name": "AWS SES Notification",
			"item": [
				{
					"name": "Send AWS SES Notification - Success",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response is valid JSON\", function () {",
									"    pm.response.to.be.json;",
									"});",
									"pm.test(\"Response has valid 'status' and 'data' properties\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property(\"status\", \"success\");",
									"    pm.expect(jsonData).to.have.property(\"data\").to.be.an(\"object\");",
									"});",
									"pm.test(\"Response contains a valid 'notification' object\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.data).to.have.property(\"notification\").to.be.an(\"object\");",
									"});",
									"pm.test(\"Response 'channelType' is 11\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.data.notification).to.have.property(\"channelType\", 11);",
									"});",
									"pm.test(\"Response 'deliveryStatus' is 1\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.data.notification).to.have.property(\"deliveryStatus\", 1);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "x-api-key",
								"value": "{{x-api-key}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    // Assuming providerId 11 also has channelType 11\n    \"providerId\": 11,\n    \"data\": {\n        \"from\": \"fromtestmail@gmail.com\",\n        \"to\": \"totestmail@gmail.co\",\n        \"subject\": \"Test subject\",\n        \"text\": \"This is a test notification\",\n        \"html\": \"<b>This is a test notification</b>\",\n        \"replyTo\": \"replytestmail@gmail.com\"\n    }\n}"
						},
						"url": {
							"raw": "localhost:3000/notifications",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"notifications"
							]
						},
						"description": "Allows successfully creating new notification for the AWS SES channel type."
					},
					"response": []
				},
				{
					"name": "Send AWS SES Notification - Missing To Field",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response is valid JSON\", function () {",
									"    pm.response.to.be.json;",
									"});",
									"pm.test(\"Response for Invalid Data (Missing 'to' Value)\", function () {",
									"    pm.expect(pm.response.code).to.equal(400);",
									"    pm.expect(pm.response.json().status).to.equal(\"fail\");",
									"    pm.expect(pm.response.json().data[0]).to.equal(\"to should not be empty\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "x-api-key",
								"value": "{{x-api-key}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"providerId\": 11,\n    \"data\": {\n        \"from\": \"fromtestmail@gmail.com\",\n        \"subject\": \"Test subject\",\n        \"text\": \"This is a test notification\",\n        \"html\": \"<b>This is a test notification</b>\",\n        \"replyTo\": \"replytestmail@gmail.com\"\n    }\n}"
						},
						"url": {
							"raw": "localhost:3000/notifications",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"notifications"
							]
						},
						"description": "Allows representing failure in creating new notification for the AWS SES channel type when missing the `to` field."
					},
					"response": []
				},
				{
					"name": "Send AWS SES Notification - Mismatch in ChannelType",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response is valid JSON\", function () {",
									"    pm.response.to.be.json;",
									"});",
									"pm.test(\"Response code is 400 Bad Request\", function () {",
									"    pm.expect(pm.response.code).to.equal(400);",
									"});",
									"pm.test(\"Response has valid 'status' and 'data' properties\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property(\"status\", \"fail\");",
									"    pm.expect(jsonData).to.have.property(\"data\");",
									"});",
									"pm.test(\"Response does not contain a valid 'notification' object\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.data).to.not.have.property(\"notification\").to.be.an(\"object\");",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "x-api-key",
								"value": "{{x-api-key}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    // Assuming providerId 111 does not have channelType 11\n    \"providerId\": 111,\n    \"data\": {\n        \"from\": \"fromtestmail@gmail.com\",\n        \"to\": \"totestmail@gmail.co\",\n        \"subject\": \"Test subject\",\n        \"text\": \"This is a test notification\",\n        \"html\": \"<b>This is a test notification</b>\",\n        \"replyTo\": \"replytestmail@gmail.com\"\n    }\n}"
						},
						"url": {
							"raw": "localhost:3000/notifications",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"notifications"
							]
						},
						"description": "Allows successfully creating new notification for the AWS SES channel type."
					},
					"response": []
				},
				{
					"name": "Send AWS SES Notification - Invalid API Key",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response is valid JSON\", function () {",
									"    pm.response.to.be.json;",
									"});",
									"pm.test(\"Failed request with invalid x-api-key\", function () {",
									"    pm.expect(pm.response.code).to.equal(401);",
									"    pm.expect(pm.response.json().status).to.equal(\"fail\");",
									"    pm.expect(pm.response.json().data).to.equal(\"Invalid x-api-key\");",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "x-api-key",
								"value": "bad-api-key",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"providerId\": 11,\n    \"data\": {\n        \"from\": \"fromtestmail@gmail.com\",\n        \"to\": \"totestmail@gmail.co\",\n        \"subject\": \"Test subject\",\n        \"text\": \"This is a test notification\",\n        \"html\": \"<b>This is a test notification</b>\",\n        \"replyTo\": \"replytestmail@gmail.com\"\n    }\n}"
						},
						"url": {
							"raw": "localhost:3000/notifications",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"notifications"
							]
						},
						"description": "Allows representing failure in creating new notification for the AWS SES channel type when passing invalid API key."
					},
					"response": []
				}
			],
			"description": "Collection of requests pertaining to creating notifications for the AWS SES channel type."
		},
		{
			"name": "SNS SMS Notification",
			"item": [
				{
					"name": "Send SNS SMS Notification - Success",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response is valid JSON\", function () {",
									"    pm.response.to.be.json;",
									"});",
									"pm.test(\"Response has valid 'status' and 'data' properties\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property(\"status\", \"success\");",
									"    pm.expect(jsonData).to.have.property(\"data\").to.be.an(\"object\");",
									"});",
									"pm.test(\"Response contains a valid 'notification' object\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.data).to.have.property(\"notification\").to.be.an(\"object\");",
									"});",
									"pm.test(\"Response 'channelType' is 12\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.data.notification).to.have.property(\"channelType\", 12);",
									"});",
									"pm.test(\"Response 'deliveryStatus' is 1\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.data.notification).to.have.property(\"deliveryStatus\", 1);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "x-api-key",
								"value": "{{x-api-key}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"providerId\": 12,\n    \"data\": {\n        \"to\": \"+919234567890\",\n        \"message\": \"This is a test notification\"\n    }\n}"
						},
						"url": {
							"raw": "localhost:3000/notifications",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"notifications"
							]
						},
						"description": "Allows successfully creating new notification for the SNS SMS channel type."
					},
					"response": []
				},
				{
					"name": "Send SNS SMS Notification - Missing to Field",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response is valid JSON\", function () {",
									"    pm.response.to.be.json;",
									"});",
									"pm.test(\"Response for Invalid Data (Missing 'to' Value)\", function () {",
									"    pm.expect(pm.response.code).to.equal(400);",
									"    pm.expect(pm.response.json().status).to.equal(\"fail\");",
									"    pm.expect(pm.response.json().data[0]).to.equal(\"to should not be empty\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "x-api-key",
								"value": "{{x-api-key}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"providerId\": 12,\n    \"data\": {\n        \"message\": \"This is a test notification\"\n    }\n}"
						},
						"url": {
							"raw": "localhost:3000/notifications",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"notifications"
							]
						},
						"description": "Allows representing failure in creating new notification for the SNS SMS channel type when missing the `to` field."
					},
					"response": []
				},
				{
					"name": "Send SNS SMS Notification - Mismatch in ChannelType",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response is valid JSON\", function () {",
									"    pm.response.to.be.json;",
									"});",
									"pm.test(\"Response code is 400 Bad Request\", function () {",
									"    pm.expect(pm.response.code).to.equal(400);",
									"});",
									"pm.test(\"Response has valid 'status' and 'data' properties\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property(\"status\", \"fail\");",
									"    pm.expect(jsonData).to.have.property(\"data\");",
									"});",
									"pm.test(\"Response does not contain a valid 'notification' object\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.data).to.not.have.property(\"notification\").to.be.an(\"object\");",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "x-api-key",
								"value": "{{x-api-key}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"providerId\": 121,\n    \"data\": {\n        \"to\": \"+919234567890\",\n        \"message\": \"This is a test notification\"\n    }\n}"
						},
						"url": {
							"raw": "localhost:3000/notifications",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"notifications"
							]
						},
						"description": "Allows successfully creating new notification for the SNS SMS channel type."
					},
					"response": []
				},
				{
					"name": "Send SNS SMS Notification - Invalid API Key",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response is valid JSON\", function () {",
									"    pm.response.to.be.json;",
									"});",
									"pm.test(\"Failed request with invalid x-api-key\", function () {",
									"    pm.expect(pm.response.code).to.equal(401);",
									"    pm.expect(pm.response.json().status).to.equal(\"fail\");",
									"    pm.expect(pm.response.json().data).to.equal(\"Invalid x-api-key\");",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "x-api-key",
								"value": "bad-api-key",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"providerId\": 12,\n    \"data\": {\n        \"to\": \"+919234567890\",\n        \"message\": \"This is a test notification\"\n    }\n}"
						},
						"url": {
							"raw": "localhost:3000/notifications",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"notifications"
							]
						},
						"description": "Allows representing failure in creating new notification for the SNS SMS channel type when passing invalid API key."
					},
					"response": []
				}
			],
			"description": "Collection of requests pertaining to creating notifications for the SNS SMS channel type."
		},
		{
			"name": "Authentication",
			"item": [
				{
					"name": "Login - Success",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response is valid JSON\", function () {",
									"    pm.response.to.be.json;",
									"});",
									"pm.test(\"Response has valid 'data' property\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property(\"data\").to.be.an(\"object\");",
									"});",
									"pm.test(\"Response contains a valid 'login' object\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.data).to.have.property(\"login\").to.be.an(\"object\");",
									"});",
									"pm.test(\"Response contains valid 'token' and 'user' values\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.data.login).to.have.property(\"token\").to.be.a(\"string\");",
									"    pm.expect(jsonData.data.login).to.have.property(\"user\").to.be.a(\"string\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation LoginUser($username: String!, $password: String!) {\n  login(loginUserInput: {username: $username, password: $password}) {\n    token\n    __typename\n  }\n}",
								"operationName": "LoginUser",
								"variables": "{\n  \"username\": \"{{adminUsername}}\",\n  \"password\": \"{{adminPassword}}\"\n}"
							}
						},
						"url": {
							"raw": "http://localhost:3000/graphql",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"graphql"
							]
						},
						"description": "Allows successfully logging in and obtaining the auth token from API."
					},
					"response": []
				},
				{
					"name": "Login - Invalid credentials",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response is valid JSON\", function () {",
									"    pm.response.to.be.json;",
									"});",
									"pm.test(\"Response for failed login with invalid credentials\", function () {",
									"    pm.expect(pm.response.code).to.equal(200);",
									"    pm.expect(pm.response.json().data).to.equal(null);",
									"    pm.expect(pm.response.json().errors).to.be.an(\"array\");",
									"    pm.expect(pm.response.json().errors[0].message).to.equal(\"Invalid username or password\");",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation LoginUser($username: String!, $password: String!) {\n  login(loginUserInput: {username: $username, password: $password}) {\n    token\n    __typename\n  }\n}",
								"operationName": "LoginUser",
								"variables": "{\n  \"username\": \"{{adminUsername}}\",\n  \"password\": \"abc{{adminPassword}}\"\n}"
							}
						},
						"url": {
							"raw": "http://localhost:3000/graphql",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"graphql"
							]
						},
						"description": "Allows representing failure while logging in when passing invalid credentials."
					},
					"response": []
				},
				{
					"name": "Login - Missing password",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response is valid JSON\", function () {",
									"    pm.response.to.be.json;",
									"});",
									"pm.test(\"Response for failed login with missing password\", function () {",
									"    pm.expect(pm.response.code).to.equal(400);",
									"    pm.expect(pm.response.json().errors).to.be.an(\"array\");",
									"    pm.expect(pm.response.json().errors[0].message).to.equal(\"Field \\\"LoginUserInput.password\\\" of required type \\\"String!\\\" was not provided.\");",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation LoginUser($username: String!) {\n  login(loginUserInput: {username: $username}) {\n    token\n    __typename\n  }\n}",
								"operationName": "LoginUser",
								"variables": "{\n  \"username\": \"{{adminUsername}}\"\n}"
							}
						},
						"url": {
							"raw": "http://localhost:3000/graphql",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"graphql"
							]
						},
						"description": "Allows representing failure while logging in when missing `password` value."
					},
					"response": []
				},
				{
					"name": "Login - Bad request",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response is valid JSON\", function () {",
									"    pm.response.to.be.json;",
									"});",
									"pm.test(\"Response for failed login with bad request\", function () {",
									"    pm.expect(pm.response.code).to.equal(400);",
									"    pm.expect(pm.response.json().errors).to.be.an(\"array\");",
									"    pm.expect(pm.response.json().errors[0].message).to.be.a(\"string\");",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation LoginUser($username: String!, $password: String!) {\n  login(loginUserInput: {username: $username, password: $password}) {\n    token\n    users\n    allKeys {\n       apiKeyId\n       apiKey\n       applicationId\n       status\n    }\n    __typename\n  }\n}",
								"operationName": "LoginUser",
								"variables": "{\n  \"username\": \"{{adminUsername}}\",\n  \"password\": \"{{adminPassword}}\"\n}"
							}
						},
						"url": {
							"raw": "http://localhost:3000/graphql",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"graphql"
							]
						},
						"description": "Allows representing failure while logging in when using invalid/bad request."
					},
					"response": []
				}
			],
			"description": "Collection of requests pertaining to authentication related requests such as login."
		},
		{
			"name": "All Notifications",
			"item": [
				{
					"name": "Fetch All Notifications - Success",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response is valid JSON\", function () {",
									"    pm.response.to.be.json;",
									"});",
									"pm.test(\"Response has valid 'data' property\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property(\"data\").to.be.an(\"object\");",
									"});",
									"pm.test(\"Response contains a valid 'notifications' object\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.data).to.have.property(\"notifications\").to.be.an(\"object\");",
									"});",
									"pm.test(\"Response contains a valid 'notifications' array\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.data.notifications).to.have.property(\"notifications\").to.be.an(\"array\");",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{auth-token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query {\r\n  notifications(\r\n    options: {\r\n      limit: 5\r\n      offset: 0\r\n      sortBy: \"createdOn\"\r\n      sortOrder: DESC\r\n      search: \"sender@email.com\"\r\n      filters: [{ field: \"applicationId\", operator: \"eq\", value: \"1\" }]\r\n    }\r\n  ) {\r\n    notifications {\r\n      applicationDetails {\r\n        applicationId\r\n        name\r\n        userId\r\n        status\r\n        createdOn\r\n        updatedOn\r\n      }\r\n      applicationId\r\n      channelType\r\n      createdBy\r\n      createdOn\r\n      data\r\n      deliveryStatus\r\n      id\r\n      providerDetails {\r\n        providerId\r\n        name\r\n        channelType\r\n        isEnabled\r\n        configuration\r\n        applicationId\r\n        userId\r\n        status\r\n      }\r\n      providerId\r\n      result\r\n      status\r\n      updatedBy\r\n      updatedOn\r\n    }\r\n    total,\r\n    offset,\r\n    limit\r\n  }\r\n}",
								"variables": ""
							}
						},
						"url": {
							"raw": "http://localhost:3000/graphql",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"graphql"
							]
						},
						"description": "Allows successfully fetching all notifications based on the options passed."
					},
					"response": []
				},
				{
					"name": "Fetch All Notifications - Bad request",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response is valid JSON\", function () {",
									"    pm.response.to.be.json;",
									"});",
									"pm.test(\"Response for fetching notifications with bad request\", function () {",
									"    pm.expect(pm.response.code).to.equal(400);",
									"    pm.expect(pm.response.json().errors).to.be.an(\"array\");",
									"    pm.expect(pm.response.json().errors[0].message).to.be.a(\"string\");",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{auth-token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query {\r\n  notifications(\r\n    options: {\r\n      unknownValue: \"Some unknown parameter\"\r\n      limit: 5\r\n      offset: 0\r\n      sortBy: \"createdOn\"\r\n      sortOrder: DESC\r\n      search: \"sender@email.com\"\r\n      filters: [{ field: \"applicationId\", operator: \"eq\", value: \"1\" }]\r\n    }\r\n  ) {\r\n    notifications {\r\n      applicationDetails {\r\n        applicationId\r\n        name\r\n        userId\r\n        status\r\n        createdOn\r\n        updatedOn\r\n      }\r\n      applicationId\r\n      channelType\r\n      createdBy\r\n      createdOn\r\n      data\r\n      deliveryStatus\r\n      id\r\n      providerDetails {\r\n        providerId\r\n        name\r\n        channelType\r\n        isEnabled\r\n        configuration\r\n        applicationId\r\n        userId\r\n        status\r\n      }\r\n      providerId\r\n      result\r\n      status\r\n      updatedBy\r\n      updatedOn\r\n    }\r\n    total,\r\n    offset,\r\n    limit\r\n  }\r\n}",
								"variables": ""
							}
						},
						"url": {
							"raw": "http://localhost:3000/graphql",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"graphql"
							]
						},
						"description": "Allows representing failure when fetching all notifications when using invalid/bad request."
					},
					"response": []
				}
			],
			"description": "Collection of requests pertaining to fetching all notifications."
		},
		{
			"name": "All Applications",
			"item": [
				{
					"name": "Fetch all Applications - Success",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response is valid JSON\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"pm.test(\"Response has valid 'data' property\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property(\"data\").to.be.an(\"object\");\r",
									"});\r",
									"pm.test(\"Response contains a valid 'applications' object\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.data).to.have.property(\"applications\").to.be.an(\"object\");\r",
									"});\r",
									"pm.test(\"Response contains a valid 'applications' array\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.data.applications).to.have.property(\"applications\").to.be.an(\"array\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{auth-token}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query {\r\n  applications(\r\n    options: {\r\n      limit: 5\r\n      offset: 0\r\n      sortBy: \"createdOn\"\r\n      sortOrder: ASC\r\n      search: \"sampleOsmoXApp\"\r\n      filters: [{ field: \"applicationId\", operator: \"eq\", value: \"1\" }]\r\n    }\r\n  ) {\r\n    applications {\r\n        applicationId\r\n        name\r\n        userId\r\n        createdOn\r\n        updatedOn\r\n        status\r\n    }\r\n    total,\r\n    offset,\r\n    limit\r\n  }\r\n}",
								"variables": ""
							}
						},
						"url": {
							"raw": "http://localhost:3000/graphql",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"graphql"
							]
						},
						"description": "Allows successfully fetching all applications based on the options passed."
					},
					"response": []
				},
				{
					"name": "Fetch all Applications - Error - Non Admin user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response is valid JSON\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"pm.test(\"Response has valid 'errors' and 'data' properties\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property(\"data\");\r",
									"    pm.expect(jsonData).to.have.property(\"errors\").to.be.an(\"array\");\r",
									"});\r",
									"pm.test(\"message: Forbidden resource\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property(\"data\");\r",
									"    pm.expect(jsonData).to.have.property(\"errors\").to.be.an(\"array\");\r",
									"    pm.expect(jsonData.errors[0]).to.have.property(\"message\", \"Forbidden resource\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{auth-token}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query {\r\n  applications(\r\n    options: {\r\n      limit: 5\r\n      offset: 0\r\n      sortBy: \"createdOn\"\r\n      sortOrder: ASC\r\n    #   search: \"Pinestem\"\r\n    #   filters: [{ field: \"applicationId\", operator: \"eq\", value: \"1\" }]\r\n    }\r\n  ) {\r\n    applications {\r\n        applicationId\r\n        name\r\n        userId\r\n        createdOn\r\n        updatedOn\r\n        status\r\n    }\r\n    total,\r\n    offset,\r\n    limit\r\n  }\r\n}",
								"variables": ""
							}
						},
						"url": {
							"raw": "http://localhost:3000/graphql",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"graphql"
							]
						},
						"description": "Allows representing failure when fetching all applications when using a NON ADMIN user for triggering request."
					},
					"response": []
				},
				{
					"name": "Fetch all Applications - Bad Request",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response is valid JSON\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"pm.test(\"Response for fetching notifications with bad request\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(400);\r",
									"    pm.expect(pm.response.json().errors).to.be.an(\"array\");\r",
									"    pm.expect(pm.response.json().errors[0].message).to.be.a(\"string\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{auth-token}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query {\r\n  applications(\r\n    options: {\r\n      unknownValue: \"Some unknown parameter\"\r\n      limit: 5\r\n      offset: 0\r\n      sortBy: \"createdOn\"\r\n      sortOrder: ASC\r\n      search: \"key\"\r\n      filters: [{ field: \"applicationId\", operator: \"eq\", value: \"1\" }]\r\n    }\r\n  ) {\r\n    applications {\r\n        applicationId\r\n        name\r\n        userId\r\n        createdOn\r\n        updatedOn\r\n        status\r\n    }\r\n    total,\r\n    offset,\r\n    limit\r\n  }\r\n}",
								"variables": ""
							}
						},
						"url": {
							"raw": "http://localhost:3000/graphql",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"graphql"
							]
						},
						"description": "Allows representing failure when fetching all applications when using invalid/bad request."
					},
					"response": []
				}
			],
			"description": "Collection of requests pertaining to fetching all applications."
		},
		{
			"name": "New Application",
			"item": [
				{
					"name": "Create new Application - Success",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response is valid JSON\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"pm.test(\"Response has valid 'data' property\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property(\"data\").to.be.an(\"object\");\r",
									"});\r",
									"pm.test(\"Response contains a valid 'application' object\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.data).to.have.property(\"application\").to.be.an(\"object\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{auth-token}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation CreateApplication {\r\n    application(createApplicationInput: {\r\n        name: \"sampleTestXApp\",\r\n    }) {\r\n        applicationId\r\n        name\r\n        userId\r\n        createdOn\r\n        updatedOn\r\n        status\r\n    }\r\n}",
								"variables": ""
							}
						},
						"url": {
							"raw": "http://localhost:3000/graphql",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"graphql"
							]
						},
						"description": "Allows successfully creating an application based on the options passed."
					},
					"response": []
				},
				{
					"name": "Create new Application - Error - Non Admin user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response is valid JSON\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"pm.test(\"Response has valid 'errors' and 'data' properties\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property(\"data\");\r",
									"    pm.expect(jsonData).to.have.property(\"errors\").to.be.an(\"array\");\r",
									"});\r",
									"pm.test(\"message: Forbidden resource\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property(\"data\");\r",
									"    pm.expect(jsonData).to.have.property(\"errors\").to.be.an(\"array\");\r",
									"    pm.expect(jsonData.errors[0]).to.have.property(\"message\", \"Forbidden resource\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{auth-token}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation CreateApplication {\r\n    application(createApplicationInput: {\r\n        name: \"sampleTestXApp\",\r\n    }) {\r\n        applicationId\r\n        name\r\n        userId\r\n        createdOn\r\n        updatedOn\r\n        status\r\n    }\r\n}",
								"variables": ""
							}
						},
						"url": {
							"raw": "http://localhost:3000/graphql",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"graphql"
							]
						},
						"description": "Allows representing failure when creating an application when using a NON ADMIN user for triggering request."
					},
					"response": []
				},
				{
					"name": "Create new Application - Bad Request",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response is valid JSON\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"pm.test(\"Response for creating new application with bad request\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(400);\r",
									"    pm.expect(pm.response.json().errors).to.be.an(\"array\");\r",
									"    pm.expect(pm.response.json().errors[0].message).to.be.a(\"string\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{auth-token}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation CreateApplication {\r\n    application(createApplicationInput: {\r\n        unknownValue: \"Some unknown parameter\"\r\n        name: \"sampleFoundationXApp\",\r\n    }) {\r\n        applicationId\r\n        name\r\n        userId\r\n        createdOn\r\n        updatedOn\r\n        status\r\n    }\r\n}",
								"variables": ""
							}
						},
						"url": {
							"raw": "http://localhost:3000/graphql",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"graphql"
							]
						},
						"description": "Allows representing failure when creating an application when using invalid/bad request."
					},
					"response": []
				}
			],
			"description": "Collection of requests pertaining to creating new application."
		},
		{
			"name": "All Providers",
			"item": [
				{
					"name": "Fetch all Providers - Success",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response is valid JSON\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"pm.test(\"Response has valid 'data' property\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property(\"data\").to.be.an(\"object\");\r",
									"});\r",
									"pm.test(\"Response contains a valid 'providers' object\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.data).to.have.property(\"providers\").to.be.an(\"object\");\r",
									"});\r",
									"pm.test(\"Response contains a valid 'providers' array\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.data.providers).to.have.property(\"providers\").to.be.an(\"array\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{auth-token}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query {\r\n  providers(\r\n    options: {\r\n      limit: 5\r\n      offset: 0\r\n      sortBy: \"createdOn\"\r\n      sortOrder: ASC\r\n    }\r\n  ) {\r\n    providers {\r\n        providerId\r\n        name\r\n        channelType\r\n        configuration\r\n        isEnabled\r\n        userId\r\n        createdOn\r\n        updatedOn\r\n        status\r\n    }\r\n    total,\r\n    offset,\r\n    limit\r\n  }\r\n}",
								"variables": ""
							}
						},
						"url": {
							"raw": "http://localhost:3000/graphql",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"graphql"
							]
						},
						"description": "Allows successfully fetching all providers based on the options passed."
					},
					"response": []
				},
				{
					"name": "Fetch all Providers - Error - Non Admin user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response is valid JSON\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"pm.test(\"Response has valid 'errors' and 'data' properties\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property(\"data\");\r",
									"    pm.expect(jsonData).to.have.property(\"errors\").to.be.an(\"array\");\r",
									"});\r",
									"pm.test(\"message: Forbidden resource\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property(\"data\");\r",
									"    pm.expect(jsonData).to.have.property(\"errors\").to.be.an(\"array\");\r",
									"    pm.expect(jsonData.errors[0]).to.have.property(\"message\", \"Forbidden resource\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{auth-token}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query {\r\n  providers(\r\n    options: {\r\n      limit: 5\r\n      offset: 0\r\n      sortBy: \"createdOn\"\r\n      sortOrder: ASC\r\n    }\r\n  ) {\r\n    providers {\r\n        providerId\r\n        name\r\n        channelType\r\n        configuration\r\n        isEnabled\r\n        userId\r\n        createdOn\r\n        updatedOn\r\n        status\r\n    }\r\n    total,\r\n    offset,\r\n    limit\r\n  }\r\n}",
								"variables": ""
							}
						},
						"url": {
							"raw": "http://localhost:3000/graphql",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"graphql"
							]
						},
						"description": "Allows representing failure when fetching all providers when using a NON ADMIN user for triggering request."
					},
					"response": []
				},
				{
					"name": "Fetch all Providers - Bad Request",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response is valid JSON\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"pm.test(\"Response for creating new application with bad request\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(400);\r",
									"    pm.expect(pm.response.json().errors).to.be.an(\"array\");\r",
									"    pm.expect(pm.response.json().errors[0].message).to.be.a(\"string\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{auth-token}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query {\r\n  providers(\r\n    options: {\r\n      limit: 5\r\n      offset: 0\r\n      sortBy: \"createdOn\"\r\n      unknownValue: \"Some unknown parameter\"\r\n      sortOrder: ASC\r\n    }\r\n  ) {\r\n    providers {\r\n        providerId\r\n        name\r\n        channelType\r\n        configuration\r\n        isEnabled\r\n        userId\r\n        createdOn\r\n        updatedOn\r\n        status\r\n    }\r\n    total,\r\n    offset,\r\n    limit\r\n  }\r\n}",
								"variables": ""
							}
						},
						"url": {
							"raw": "http://localhost:3000/graphql",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"graphql"
							]
						},
						"description": "Allows representing failure when fetching all providers when using invalid/bad request."
					},
					"response": []
				}
			],
			"description": "Collection of requests pertaining to fetching all providers."
		},
		{
			"name": "New Provider",
			"item": [
				{
					"name": "Create new Provider - Success",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response is valid JSON\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"pm.test(\"Response has valid 'data' property\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property(\"data\").to.be.an(\"object\");\r",
									"});\r",
									"pm.test(\"Response contains a valid 'provider' object\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.data).to.have.property(\"provider\").to.be.an(\"object\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{auth-token}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation CreateProvider {\n    provider(createProviderInput: {\n        applicationId: 2,\n        channelType: 2,\n        configuration: {},\n        isEnabled: 1,\n        name: \"Mailgun PineStem\",\n        userId: 1,\n    }) {\n        providerId\n        applicationId\n        channelType\n        configuration\n        isEnabled\n        name\n        userId\n        createdOn\n        updatedOn\n        status\n    }\n}",
								"variables": ""
							}
						},
						"url": {
							"raw": "http://localhost:3000/graphql",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"graphql"
							]
						},
						"description": "Allows successfully creating a provider based on the options passed."
					},
					"response": []
				},
				{
					"name": "Create new Provider - Error - Invalid ApplicationId",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response is valid JSON\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"pm.test(\"Response has valid 'errors' and 'data' properties\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property(\"data\");\r",
									"    pm.expect(jsonData).to.have.property(\"errors\").to.be.an(\"array\");\r",
									"});\r",
									"pm.test(\"message: Invalid applicationId.\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property(\"data\");\r",
									"    pm.expect(jsonData).to.have.property(\"errors\").to.be.an(\"array\");\r",
									"    pm.expect(jsonData.errors[0]).to.have.property(\"message\", \"Invalid applicationId.\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{auth-token}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation CreateProvider {\n    provider(createProviderInput: {\n        # Assuming applicationId 500 is invalid\n        applicationId: 500,\n        channelType: 2,\n        configuration: {},\n        isEnabled: 1,\n        name: \"Mailgun PineStem\",\n        userId: 1,\n    }) {\n        providerId\n        applicationId\n        channelType\n        configuration\n        isEnabled\n        name\n        userId\n        createdOn\n        updatedOn\n        status\n    }\n}",
								"variables": ""
							}
						},
						"url": {
							"raw": "http://localhost:3000/graphql",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"graphql"
							]
						},
						"description": "Allows representing failure when creating a provider when using an invalid applicationId for triggering request."
					},
					"response": []
				},
				{
					"name": "Create new Provider - Error - Non Admin user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response is valid JSON\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"pm.test(\"Response has valid 'errors' and 'data' properties\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property(\"data\");\r",
									"    pm.expect(jsonData).to.have.property(\"errors\").to.be.an(\"array\");\r",
									"});\r",
									"pm.test(\"message: Forbidden resource\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property(\"data\");\r",
									"    pm.expect(jsonData).to.have.property(\"errors\").to.be.an(\"array\");\r",
									"    pm.expect(jsonData.errors[0]).to.have.property(\"message\", \"Forbidden resource\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{auth-token}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation CreateProvider {\n    provider(createProviderInput: {\n        applicationId: 5,\n        channelType: 2,\n        configuration: {},\n        isEnabled: 1,\n        name: \"Mailgun PineStem\",\n        userId: 1,\n    }) {\n        providerId\n        applicationId\n        channelType\n        configuration\n        isEnabled\n        name\n        userId\n        createdOn\n        updatedOn\n        status\n    }\n}",
								"variables": ""
							}
						},
						"url": {
							"raw": "http://localhost:3000/graphql",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"graphql"
							]
						},
						"description": "Allows representing failure when creating a provider when using a NON ADMIN user for triggering request."
					},
					"response": []
				},
				{
					"name": "Create new Provider - Bad Request",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response is valid JSON\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"pm.test(\"Response for creating new application with bad request\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(400);\r",
									"    pm.expect(pm.response.json().errors).to.be.an(\"array\");\r",
									"    pm.expect(pm.response.json().errors[0].message).to.be.a(\"string\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{auth-token}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation CreateProvider {\n    provider(createProviderInput: {\n        applicationId: 5,\n        unknownValue: \"Some unknown parameter\",\n        channelType: 2,\n        configuration: {},\n        isEnabled: 1,\n        name: \"Mailgun PineStem\",\n        userId: 1,\n    }) {\n        providerId\n        applicationId\n        channelType\n        configuration\n        isEnabled\n        name\n        userId\n        createdOn\n        updatedOn\n        status\n    }\n}",
								"variables": ""
							}
						},
						"url": {
							"raw": "http://localhost:3000/graphql",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"graphql"
							]
						},
						"description": "Allows representing failure when creating a provider when using invalid/bad request."
					},
					"response": []
				}
			],
			"description": "Collection of requests pertaining to creation of a new provider."
		},
		{
			"name": "Webhook",
			"item": [
				{
					"name": "Register Webhook - Success",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response is valid JSON\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"pm.test(\"Response has valid 'data' property\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property(\"data\").to.be.an(\"object\");\r",
									"});\r",
									"pm.test(\"Response 'data' has valid 'webhook' property\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property(\"data\").to.have.property(\"webhook\").to.be.an(\"object\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{auth-token}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "x-api-key",
								"value": "{{x-api-key}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation RegisterWebhook {\n    webhook(createWebhookInput: {\n        providerId: 10,\n        webhookUrl: \"http://localhost:4200/webhook\",\n    }) {\n        webhookUrl\n        providerId\n        createdOn\n        updatedOn\n        status\n    }\n}",
								"variables": ""
							}
						},
						"url": {
							"raw": "http://localhost:3000/graphql",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"graphql"
							]
						},
						"description": "Allows successfully registering a webhook based on the options passed."
					},
					"response": []
				},
				{
					"name": "Register Webhook - Error - provider already exist",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response is valid JSON\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"pm.test(\"Response has valid 'errors' and 'data' properties\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property(\"data\");\r",
									"    pm.expect(jsonData).to.have.property(\"errors\").to.be.an(\"array\");\r",
									"});\r",
									"pm.test(\"message: Failed to register webhook: This provider webhook exist\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property(\"data\");\r",
									"    pm.expect(jsonData).to.have.property(\"errors\").to.be.an(\"array\");\r",
									"    pm.expect(jsonData.errors[0]).to.have.property(\"message\", \"Failed to register webhook: This provider webhook exist\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{auth-token}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "x-api-key",
								"value": "{{x-api-key}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation RegisterWebhook {\n    webhook(createWebhookInput: {\n        providerId: 10,\n        webhookUrl: \"http://localhost:4200/webhook\",\n    }) {\n        webhookUrl\n        providerId\n        createdOn\n        updatedOn\n        status\n    }\n}",
								"variables": ""
							}
						},
						"url": {
							"raw": "http://localhost:3000/graphql",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"graphql"
							]
						},
						"description": "Allows representing failure when registering a webhook when using already existing provider for request."
					},
					"response": []
				},
				{
					"name": "Register Webhook - Error - unknown provider",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response is valid JSON\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"pm.test(\"Response has valid 'errors' and 'data' properties\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property(\"data\");\r",
									"    pm.expect(jsonData).to.have.property(\"errors\").to.be.an(\"array\");\r",
									"});\r",
									"pm.test(\"message: Failed to register webhook\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property(\"data\");\r",
									"    pm.expect(jsonData).to.have.property(\"errors\").to.be.an(\"array\");\r",
									"    pm.expect(jsonData.errors[0]).to.have.property(\"message\").contain(\"Failed to register webhook\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{auth-token}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "x-api-key",
								"value": "{{x-api-key}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation RegisterWebhook {\n    webhook(createWebhookInput: {\n        providerId: 100,\n        webhookUrl: \"http://localhost:4200/webhook\",\n    }) {\n        webhookUrl\n        providerId\n        createdOn\n        updatedOn\n        status\n    }\n}",
								"variables": ""
							}
						},
						"url": {
							"raw": "http://localhost:3000/graphql",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"graphql"
							]
						},
						"description": "Allows representing failure when registering a webhook when using unknown provider for request."
					},
					"response": []
				}
			],
			"description": "Collection of requests pertaining to webhook registration."
		},
		{
			"name": "Server Keys",
			"item": [
				{
					"name": "Generate New Key - Success",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response is valid JSON\", function () {",
									"    pm.response.to.be.json;",
									"});",
									"pm.test(\"Response has valid 'data' property\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property(\"data\").to.be.an(\"object\");",
									"});",
									"pm.test(\"Response 'data' has valid 'generateApiKey' property\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property(\"data\").to.have.property(\"generateApiKey\")",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{auth-token}}"
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation GenerateApiKey($applicationId: Int!) {\n  generateApiKey(applicationId: $applicationId)\n}",
								"variables": "{\n  \"applicationId\": 3\n}"
							}
						},
						"url": {
							"raw": "http://localhost:3000/graphql",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"graphql"
							]
						},
						"description": "Allows successfully generating a new server key based on the options passed."
					},
					"response": []
				},
				{
					"name": "Generate New Key - Error - unknown Application",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response is valid JSON\", function () {",
									"    pm.response.to.be.json;",
									"});",
									"pm.test(\"Response has valid 'errors' and 'data' properties\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property(\"data\");",
									"    pm.expect(jsonData).to.have.property(\"errors\").to.be.an(\"array\");",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{auth-token}}"
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation GenerateApiKey($applicationId: Int!) {\n  generateApiKey(applicationId: $applicationId)\n}",
								"variables": "{\n  \"applicationId\": 300\n}"
							}
						},
						"url": {
							"raw": "http://localhost:3000/graphql",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"graphql"
							]
						},
						"description": "Allows successfully generating a new server key based on the options passed."
					},
					"response": []
				}
			],
			"description": "Collection of requests pertaining to generation of server keys."
		}
	]
}